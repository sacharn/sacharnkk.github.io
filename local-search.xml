<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/09/12/2022%E5%B9%B4%E7%A7%8B%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <url>/2022/09/12/2022%E5%B9%B4%E7%A7%8B%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><h3 id="封装、继承、多态"><a href="#封装、继承、多态" class="headerlink" title="封装、继承、多态"></a>封装、继承、多态</h3><h3 id="重写与重载"><a href="#重写与重载" class="headerlink" title="重写与重载"></a>重写与重载</h3><h3 id="接口与抽象类的区别"><a href="#接口与抽象类的区别" class="headerlink" title="接口与抽象类的区别"></a>接口与抽象类的区别</h3><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><h3 id="HTTPS原理以及攻击"><a href="#HTTPS原理以及攻击" class="headerlink" title="HTTPS原理以及攻击"></a>HTTPS原理以及攻击</h3><h3 id="对称加密和非对称加密"><a href="#对称加密和非对称加密" class="headerlink" title="对称加密和非对称加密"></a>对称加密和非对称加密</h3><h3 id="Socket通信"><a href="#Socket通信" class="headerlink" title="Socket通信"></a>Socket通信</h3><h3 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h3><h3 id="NAT地址转换"><a href="#NAT地址转换" class="headerlink" title="NAT地址转换"></a>NAT地址转换</h3><h3 id="SSO、权限认证、JWT"><a href="#SSO、权限认证、JWT" class="headerlink" title="SSO、权限认证、JWT"></a>SSO、权限认证、JWT</h3><h3 id="服务端怎么获取客户端的浏览器类型"><a href="#服务端怎么获取客户端的浏览器类型" class="headerlink" title="服务端怎么获取客户端的浏览器类型"></a>服务端怎么获取客户端的浏览器类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String header = request.getHeader(<span class="hljs-string">&quot;User-Agent&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h2><h4 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h4><p>————————————————</p><p>SQL注入是将Web页面的原URL、表单域或数据包输入的参数，修改拼接成SQL语句，传递给Web服务器，进而传给数据库服务器以执行数据库命令。<br>在MyBatis中，#{}将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号，可以防止sql注入。${}将传入的数据直接显示生成在sql中，不能防止sql注入。但是在涉及到动态表名和列名时，只能用$，就必须要手动做好过滤。<br>————————————————</p><h4 id="索引分类、原理与优化"><a href="#索引分类、原理与优化" class="headerlink" title="索引分类、原理与优化"></a>索引分类、原理与优化</h4><h4 id="分库分表原理"><a href="#分库分表原理" class="headerlink" title="分库分表原理"></a>分库分表原理</h4><h4 id="主从一致"><a href="#主从一致" class="headerlink" title="主从一致"></a>主从一致</h4><h4 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h4><h4 id="事务管理与事务隔离级别"><a href="#事务管理与事务隔离级别" class="headerlink" title="事务管理与事务隔离级别"></a>事务管理与事务隔离级别</h4><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><h3 id="缓存使用"><a href="#缓存使用" class="headerlink" title="缓存使用"></a>缓存使用</h3><h4 id="过期时间"><a href="#过期时间" class="headerlink" title="过期时间"></a>过期时间</h4><h3 id="其他场景"><a href="#其他场景" class="headerlink" title="其他场景"></a>其他场景</h3><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h3><h3 id="线程创建方式"><a href="#线程创建方式" class="headerlink" title="线程创建方式"></a>线程创建方式</h3><h3 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h3><h3 id="线程池的工作流程"><a href="#线程池的工作流程" class="headerlink" title="线程池的工作流程"></a>线程池的工作流程</h3><h3 id="线程池的核心参数"><a href="#线程池的核心参数" class="headerlink" title="线程池的核心参数"></a>线程池的核心参数</h3><h3 id="线程池饱和的拒绝策略"><a href="#线程池饱和的拒绝策略" class="headerlink" title="线程池饱和的拒绝策略"></a>线程池饱和的拒绝策略</h3><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h3 id="sycronize"><a href="#sycronize" class="headerlink" title="sycronize"></a>sycronize</h3><h3 id="retreenlock"><a href="#retreenlock" class="headerlink" title="retreenlock"></a>retreenlock</h3><h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><h3 id="atomic"><a href="#atomic" class="headerlink" title="atomic"></a>atomic</h3><h3 id="threadlocal"><a href="#threadlocal" class="headerlink" title="threadlocal"></a>threadlocal</h3><h3 id="死锁的形成条件和解决办法"><a href="#死锁的形成条件和解决办法" class="headerlink" title="死锁的形成条件和解决办法"></a>死锁的形成条件和解决办法</h3><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><h3 id="JVM结构"><a href="#JVM结构" class="headerlink" title="JVM结构"></a>JVM结构</h3><h3 id="类加载流程"><a href="#类加载流程" class="headerlink" title="类加载流程"></a>类加载流程</h3><h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><h3 id="JVM调优经验"><a href="#JVM调优经验" class="headerlink" title="JVM调优经验"></a>JVM调优经验</h3><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><h2 id="Docker-k8s"><a href="#Docker-k8s" class="headerlink" title="Docker k8s"></a>Docker k8s</h2><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h3 id="项目中的使用"><a href="#项目中的使用" class="headerlink" title="项目中的使用"></a>项目中的使用</h3><h3 id="消息消费的确认，防重，幂等"><a href="#消息消费的确认，防重，幂等" class="headerlink" title="消息消费的确认，防重，幂等"></a>消息消费的确认，防重，幂等</h3><h2 id="代码题"><a href="#代码题" class="headerlink" title="代码题"></a>代码题</h2><h2 id="指令命令"><a href="#指令命令" class="headerlink" title="指令命令"></a>指令命令</h2><h3 id="怎么查看日志文件中某个时间段内的日志"><a href="#怎么查看日志文件中某个时间段内的日志" class="headerlink" title="怎么查看日志文件中某个时间段内的日志"></a>怎么查看日志文件中某个时间段内的日志</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">sed -n ‘<span class="hljs-regexp">/起始时间/</span>,<span class="hljs-regexp">/结束时间/</span>p’ 日志文件<br><span class="hljs-keyword">grep</span> ‘时间’ 日志文件<br></code></pre></td></tr></table></figure><h3 id="Linux部署项目常用命令"><a href="#Linux部署项目常用命令" class="headerlink" title="Linux部署项目常用命令"></a>Linux部署项目常用命令</h3><p>1.一般链接阿里云服务器常用的的是xshell跟xftp.</p><p>2.一开始常用的命令是cd和ls:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span>是用于切换文件路径的,其中…/可以切换到上当前路径的上一个路径<br></code></pre></td></tr></table></figure><p>3.开启tomcat服务器命令(首先需要切换到tomcat的bin目录下):</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">一般使用的是  ./startup.<span class="hljs-keyword">sh</span>  或者 bash startup.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><p>4.关闭tomcat服务器命令(路径同上):</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">一般使用的是  ./<span class="hljs-built_in">shutdown</span>.sh  或者 bash <span class="hljs-built_in">shutdown</span>.sh<br></code></pre></td></tr></table></figure><p>5.查看tomcat日志(需要切换到tomcat的logs目录下)</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">执行命令  tailf catalina.<span class="hljs-keyword">out</span>   或者  tail -f catalina.<span class="hljs-keyword">out</span>  <br></code></pre></td></tr></table></figure><p>6.查看tomcat是否开启(切换到tomcat的bin目录下)</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">执行 <span class="hljs-keyword">ps</span> ef |  <span class="hljs-keyword">grep</span> java<br></code></pre></td></tr></table></figure><p>7.杀死tomcat进程</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">执行 kiil -<span class="hljs-number">9</span> <span class="hljs-number">5263(5263</span>就是上面的红框框住的)<br></code></pre></td></tr></table></figure><p>8.查看端口占用情况</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"> 执行命令  netstat -tunlp <span class="hljs-string">|grep 端口号</span><br><br>例如 : netstat -tunlp <span class="hljs-string">|grep 80 因为我们开启了tomcat服务占用了80端口,所以此时执行该命令可以明显看到我们的端口被占用了</span><br></code></pre></td></tr></table></figure><h3 id="mysql基本命令"><a href="#mysql基本命令" class="headerlink" title="mysql基本命令"></a>mysql基本命令</h3><ol><li><p>连接数据库执行命令: mysql -u 用户名 -p</p></li><li><p>重启mysql服务执行命令: service mysql restart</p></li><li><p>开启mysql服务执行命令: service mysql start</p></li><li><p>停止mysql服务执行命令: service mysql stop</p></li><li><p>查看mysql状态执行命令: &gt;&gt;mysql<br>————————————————</p></li></ol><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>.svn <br>svn checkout svn:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">1.1</span><span class="hljs-regexp">/pro/</span>domain 检出项目<br>svn update 更新<br><span class="hljs-number">2</span>.  maven <br>clean 清除上一次Maven执行的结果<br>package 打包<br></code></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">free -h  查看内存占用情况<br>df -h 查看磁盘占用情况<br>lsb_release -a 查看系统版本号<br>mysql 重启 <span class="hljs-built_in"> service </span>mysqld restart      /etc/my.cnf mysql linux的配置位置<br>df -h  查看内存占用多少<br>du -h <span class="hljs-attribute">--max-depth</span>=1 查看当前文件夹下所有文件大小<br></code></pre></td></tr></table></figure><h2 id="笔试题回顾"><a href="#笔试题回顾" class="headerlink" title="笔试题回顾"></a>笔试题回顾</h2><h4 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h4><p>思路：先指定一个为最长公共前缀，然后遍历与之比较，调用startWith方法，对于每一个字符串，只要不是以目标最长共前缀前缀，这个目标前缀就要去掉最后一位。遍历一圈下来，目标前缀正好满足其他所有字符串的要求。</p><h3 id="查找子序列和最大的区间"><a href="#查找子序列和最大的区间" class="headerlink" title="查找子序列和最大的区间"></a>查找子序列和最大的区间</h3><p>思路：动态规划。遍历数组，如果和小于0，区间初始索引设为当前索引，和置零；否则和加上该值；如果和大于max那么就把区间截止索引设为当前索引。</p><h3 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h3><p>思路：快速排序与归并排序类似，只不过他是在不断的寻找数组中的基准位置（基准位置左边的元素比基准小右边的比基准大），在以基准为中点对左和右两个数组去找基准直到当前层的数组达到最小，那么此时数组每个位置都满足基准位置那么数组已经排序成功。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">suanfa4</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] ints = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>&#125;;<br>        quicklySort(ints,<span class="hljs-number">0</span>,ints.length-<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> anInt : ints) &#123;<br>            System.out.println(anInt);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quicklySort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] temp,<span class="hljs-keyword">int</span> low,<span class="hljs-keyword">int</span> hight)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (low&lt;hight)&#123;<br>            <span class="hljs-keyword">int</span> index = marge(temp,low,hight);<br><br>            quicklySort(temp,low,index-<span class="hljs-number">1</span>);<br>            quicklySort(temp,index+<span class="hljs-number">1</span>,hight);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">marge</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] temp, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> higth)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> key = temp[low];<br><br>        <span class="hljs-keyword">while</span>(low&lt;higth)&#123;<br>            <span class="hljs-keyword">while</span> (temp[higth]&gt;=key&amp;&amp;low&lt;higth)<br>                higth--;<br>            temp[low] = temp[higth];<br>            <span class="hljs-keyword">while</span> (temp[low]&lt;=key&amp;&amp;low&lt;higth)<br>                low++;<br>            temp[higth] = temp[low];<br>        &#125;<br><br>        temp[low]=key;<br><br>        <span class="hljs-keyword">return</span> low;<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="不使用第三变量交换两个变量的值"><a href="#不使用第三变量交换两个变量的值" class="headerlink" title="不使用第三变量交换两个变量的值"></a>不使用第三变量交换两个变量的值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">a = b - a;<br>b = b - a;<br>a = a + b;<br></code></pre></td></tr></table></figure><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><h3 id="商城"><a href="#商城" class="headerlink" title="商城"></a>商城</h3><h3 id="结算"><a href="#结算" class="headerlink" title="结算"></a>结算</h3><h4 id="规则审核开发——时间匹配，机型匹配，保修规则匹配"><a href="#规则审核开发——时间匹配，机型匹配，保修规则匹配" class="headerlink" title="规则审核开发——时间匹配，机型匹配，保修规则匹配"></a>规则审核开发——时间匹配，机型匹配，保修规则匹配</h4><ol><li><p>责任链模式</p></li><li><p>orderContext(结算启用规则列表、协议启用规则列表、寄修单实体、寄修规则审核明细列表，订单状态)、xxFilter、xxRule</p></li><li><p>规则接口，每一个规则实现接口，然后根据规则列表匹配，如果状态异常则停止审核。</p><p>理论上的责任链vs工程上的责任链。</p><p>——跨链</p></li></ol><h4 id="CURD接口开发"><a href="#CURD接口开发" class="headerlink" title="CURD接口开发"></a>CURD接口开发</h4><h4 id="规范的开发流程和代码规范"><a href="#规范的开发流程和代码规范" class="headerlink" title="规范的开发流程和代码规范"></a>规范的开发流程和代码规范</h4><p>需求交接，评审，开发，代码提交，跑流水线，本地自测，dev环境发包自测联调，测试的sit环境，用户验收环境uat的测试，参与项目上线。</p><h4 id="华为封装的Jalor框架"><a href="#华为封装的Jalor框架" class="headerlink" title="华为封装的Jalor框架"></a>华为封装的Jalor框架</h4><h4 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h4><p>​                在代码Service中加JalorResource注解，方法上加JalorOperation注解，标注方法的权限点                </p><p>​                在中台配置权限，不同的角色配置哪些权限点。而一个用户账号又可以配置多个角色。</p><h3 id="权益"><a href="#权益" class="headerlink" title="权益"></a>权益</h3><h4 id="权益与主业务流的流程与关系"><a href="#权益与主业务流的流程与关系" class="headerlink" title="权益与主业务流的流程与关系"></a>权益与主业务流的流程与关系</h4><ol><li>整个流程分为三个部分：生产制造、渠道零售、服务</li><li>渠道包括自营门店、官网、渠道商门店和网站，权益和设备销售后就进入服务阶段，渠道收到物流的货物之前属于生产制造阶段。</li><li>生产制造 包括生产、库存。物流，权益主要从这里集成基础数据</li><li>渠道销售主要是订单管理、合同管理和进销存管理</li><li>进入服务阶段后就是消费者的正常使用，故障维修阶段，故障维修后会有维修工单，涉及到权益的抵扣。维修的服务供应商因为不是华为自有，所以维修费用会有一个结算功能。</li></ol><h4 id="权益生命周期"><a href="#权益生命周期" class="headerlink" title="权益生命周期"></a>权益生命周期</h4><ol><li>权益生命周期分为四个部分：数据准备、权益发布、权益生效、权益使用</li><li>数据准备就是来自生产制造和其他系统的一些基础数据，sn号物理号，订单号，激活日期，华为账号等</li><li>权益分为基础权益、增值权益（碎屏保）、客户权益、根据国家，机型，成本等综合计算设计权益包，经过权益包申请，审批和发布。</li><li>权益生效根据电子保卡，激活时间，生产+x天，领取日期和截止日期执行权益生效</li><li>权益使用：消费者，服务中心，规则。消费者查询和使用权益（抵扣，过期，取消）；服务中心调用可授予和鉴权。</li></ol><h4 id="系统现状"><a href="#系统现状" class="headerlink" title="系统现状"></a>系统现状</h4><ol><li>存量：17亿设备、54亿权益、54亿履历、69亿物料</li><li>单日：1000万设备权益处理、4000万次权益查询（非高峰）</li><li>30万行代码</li><li>性能&lt;300ms</li></ol><h4 id="设备权益和客户权益3-x部署"><a href="#设备权益和客户权益3-x部署" class="headerlink" title="设备权益和客户权益3+x部署"></a>设备权益和客户权益3+x部署</h4><ol><li><p>背景：欧洲政府对个人数据的隐私保护很严格，德国客户调用权益的时候涉及到用户隐私的问题，所以考虑将一部分业务部署到德国，跨境的数据要进行加解密处理。</p></li><li><p>设备权益3+x转换接口开发</p><p>设备履历接口查询</p><p>​        增值权益鉴权查询</p><p>​        整个流程：德国站点调用部署在海外的加解密服务，加解密服务会将涉密的字段（sn等）进行sha256加密，然后通过HCOP中转传回国内的加解密服务进行解密，然后走JalorRestClient调国内的权益查询原生接口；响应涉及隐私数据如订单号会匿名化最后两个字符，sn等还是sha256加密。</p><p>欧洲存部分sn的密文和原字符串，国内存全量的密文和原字符串（数据库有一个映射表）</p><p>这里可能会问回传链路上的安全问题。中间人攻击之类的。</p></li><li><p>客户权益3+x部署</p><ol><li>内外集成点改造        </li></ol></li></ol><p>​                    FDI数据集成拉取：匹配上下游数据的表对表字段。每天定时拉取数据。</p><p>​                    政企客户集成任务单开发：</p><p>​                    CCPD推送订单到客户权益，首先先存入接口临时表，发消息MQS到客户权益模块，然后经过校验存入正式表，进行权益抵扣，然后持久化操作。这里的操作使用的是一个标准流的模板设计模式。</p><p>消息MQS防重：唯一的orderNo</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>开发者边车解谜小游戏</title>
    <link href="/2021/08/20/%E5%BC%80%E5%8F%91%E8%80%85%E8%BE%B9%E8%BD%A6%E8%A7%A3%E8%B0%9C%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    <url>/2021/08/20/%E5%BC%80%E5%8F%91%E8%80%85%E8%BE%B9%E8%BD%A6%E8%A7%A3%E8%B0%9C%E5%B0%8F%E6%B8%B8%E6%88%8F/</url>
    
    <content type="html"><![CDATA[<p>加密人说他把谜面留在源码的//TODO中。</p><p>打开源码，找到他留下的谜面如下：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript"><span class="hljs-symbol">\u</span>0061<span class="hljs-symbol">\u</span>0048<span class="hljs-symbol">\u</span>0052<span class="hljs-symbol">\u</span>0030<span class="hljs-symbol">\u</span>0063<span class="hljs-symbol">\u</span>0044<span class="hljs-symbol">\u</span>006f<span class="hljs-symbol">\u</span>0076<span class="hljs-symbol">\u</span>004c<span class="hljs-symbol">\u</span>0032<span class="hljs-symbol">\u</span>0052<span class="hljs-symbol">\u</span>006c<span class="hljs-symbol">\u</span>0064<span class="hljs-symbol">\u</span>0069<span class="hljs-symbol">\u</span>0031<span class="hljs-symbol">\u</span>007a<span class="hljs-symbol">\u</span>0061<span class="hljs-symbol">\u</span>0057<span class="hljs-symbol">\u</span>0052<span class="hljs-symbol">\u</span>006c<span class="hljs-symbol">\u</span>0059<span class="hljs-symbol">\u</span>0032<span class="hljs-symbol">\u</span>0046<span class="hljs-symbol">\u</span>0079<span class="hljs-symbol">\u</span>004c<span class="hljs-symbol">\u</span>006d<span class="hljs-symbol">\u</span>0052<span class="hljs-symbol">\u</span>0076<span class="hljs-symbol">\u</span>0059<span class="hljs-symbol">\u</span>0032<span class="hljs-symbol">\u</span>0031<span class="hljs-symbol">\u</span>0070<span class="hljs-symbol">\u</span>0063<span class="hljs-symbol">\u</span>006e<span class="hljs-symbol">\u</span>004a<span class="hljs-symbol">\u</span>0076<span class="hljs-symbol">\u</span>0063<span class="hljs-symbol">\u</span>0069<span class="hljs-symbol">\u</span>0035<span class="hljs-symbol">\u</span>006a<span class="hljs-symbol">\u</span>0062<span class="hljs-symbol">\u</span>0069<span class="hljs-symbol">\u</span>0039<span class="hljs-symbol">\u</span>0035<span class="hljs-symbol">\u</span>0062<span class="hljs-symbol">\u</span>0033<span class="hljs-symbol">\u</span>0056<span class="hljs-symbol">\u</span>006d<span class="hljs-symbol">\u</span>0061<span class="hljs-symbol">\u</span>0057<span class="hljs-symbol">\u</span>0035<span class="hljs-symbol">\u</span>006b<span class="hljs-symbol">\u</span>0061<span class="hljs-symbol">\u</span>0058<span class="hljs-symbol">\u</span>0051<span class="hljs-symbol">\u</span>0076<span class="hljs-symbol">\u</span>0061<span class="hljs-symbol">\u</span>0057<span class="hljs-symbol">\u</span>0035<span class="hljs-symbol">\u</span>006b<span class="hljs-symbol">\u</span>005a<span class="hljs-symbol">\u</span>0058<span class="hljs-symbol">\u</span>0067<span class="hljs-symbol">\u</span>0075<span class="hljs-symbol">\u</span>0061<span class="hljs-symbol">\u</span>0048<span class="hljs-symbol">\u</span>0052<span class="hljs-symbol">\u</span>0074<span class="hljs-symbol">\u</span>0062<span class="hljs-symbol">\u</span>0041<span class="hljs-symbol">\u</span>003d<span class="hljs-symbol">\u</span>003d<br></code></pre></td></tr></table></figure><p>于是，以下是我的解密之路：</p><p>发现这是Unicode，用IDEA先调一个Unicode转String的方法，解谜一层</p><p>转换方法是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String a = <span class="hljs-string">&quot;\\u0061\\u0048\\u0052\\u0030\\u0063\\u0044\\u006f\\u0076\\u004c\\u0032\\u0052\\u006c\\u0064\\u0069\\u0031\\u007a\\u0061\\u0057\\u0052\\u006c\\u0059\\u0032\\u0046\\u0079\\u004c\\u006d\\u0052\\u0076\\u0059\\u0032\\u0031\\u0070\\u0063\\u006e\\u004a\\u0076\\u0063\\u0069\\u0035\\u006a\\u0062\\u0069\\u0039\\u0035\\u0062\\u0033\\u0056\\u006d\\u0061\\u0057\\u0035\\u006b\\u0061\\u0058\\u0051\\u0076\\u0061\\u0057\\u0035\\u006b\\u005a\\u0058\\u0067\\u0075\\u0061\\u0048\\u0052\\u0074\\u0062\\u0041\\u003d\\u003d&quot;</span>;<br>        String s = unicode2String(a);<br>        System.out.println(s);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">unicode2String</span><span class="hljs-params">(String unicode)</span> </span>&#123;<br>        StringBuffer string = <span class="hljs-keyword">new</span> StringBuffer();<br>        String[] hex = unicode.split(<span class="hljs-string">&quot;\\\\u&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; hex.length; i++) &#123;<br>            <span class="hljs-comment">// 转换出每一个代码点</span><br>            <span class="hljs-keyword">int</span> data = Integer.parseInt(hex[i], <span class="hljs-number">16</span>);<br>            <span class="hljs-comment">// 追加成string</span><br>            string.append((<span class="hljs-keyword">char</span>) data);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> string.toString();<br>    &#125;<br></code></pre></td></tr></table></figure><p>点击“运行”，运行结果为：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">aHR0cDovL2Rldi1zaWRlY2FyLmRvY21pcnJvci5jbi95b3VmaW5kaXQvaW5kZXguaHRtbA</span>==<br></code></pre></td></tr></table></figure><p>发现这又是一个编码后的串，需要再解密</p><p>因为是==结尾，所以这是一个base64的加密方式</p><p>于是，直接上网查base64解码，解码得</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>dev-sidecar.docmirror.cn<span class="hljs-regexp">/youfindit/i</span>ndex.html<br></code></pre></td></tr></table></figure><p>接下来就是，登录这个网站，我以为结束了，毫不费力嘛~</p><p>打开网站傻眼了，却发现除了文字之外，啥也没有…</p><p><img src="/2021/08/20/%E5%BC%80%E5%8F%91%E8%80%85%E8%BE%B9%E8%BD%A6%E8%A7%A3%E8%B0%9C%E5%B0%8F%E6%B8%B8%E6%88%8F/image-20210820111218324.png" alt="image-20210820111218324"></p><p>嗐，这又是开发者留下的有一个谜，于是继续探寻…</p><p>既然页面看不出什么名堂，就直接进入开发者模式</p><p>看看有没有什么隐藏的内容，是加密人藏在里面的！</p><p><img src="/2021/08/20/%E5%BC%80%E5%8F%91%E8%80%85%E8%BE%B9%E8%BD%A6%E8%A7%A3%E8%B0%9C%E5%B0%8F%E6%B8%B8%E6%88%8F/image-20210820111603473.png" alt="image-20210820111603473"></p><p>果不其然啊，他偷偷藏了一个图片在页面里，看不见（我也是醉了），于是我直接把图片下下来，发现是个二维码，但是这个二维码是透明的，这也就是为什么能够藏在页面里，不被看到的原因。这个二维码的信息显示，它也是base64加密的，于是顺手解密看看，发现他是用photoshop处理的这个透明。不过这对解密没啥大用。</p><p>这个透明的二维码，用微信是扫不出来的。于是陷入迷茫，我也不会ps，咋搞？</p><p>灵机一动，我直接用图片查看器打开，然后用截图工具截图，再传到微信扫一扫</p><p>终于谜底出现了…</p><p><img src="/2021/08/20/%E5%BC%80%E5%8F%91%E8%80%85%E8%BE%B9%E8%BD%A6%E8%A7%A3%E8%B0%9C%E5%B0%8F%E6%B8%B8%E6%88%8F/a3cfe4e9461efa159e295803f7725b0.jpg" alt="a3cfe4e9461efa159e295803f7725b0"></p>]]></content>
    
    
    
    <tags>
      
      <tag>趣事</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态代理的形象理解</title>
    <link href="/2021/06/23/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E5%BD%A2%E8%B1%A1%E7%90%86%E8%A7%A3/"/>
    <url>/2021/06/23/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E5%BD%A2%E8%B1%A1%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>动态代理：</p><p>​        借他人之手解决自己的需求</p><p>模拟一个场景：</p><p>​        明朝的一个皇帝想杀一个大臣，但是又没有太好的理由，顾及自己的脸面，不能脏了自己的手，落下历史骂名，所以就想锦衣卫来解决这个问题：杀了这个不听话的大臣。</p><p>​        现在捋一下：幕后主使：皇帝，需求：杀大臣，代理人：锦衣卫。</p><p>接下来要细化这个故事，</p><p>​        ① 需求：杀大臣；</p><p>​        ② 杀一个大臣不能说杀就杀，得有方案：也就是皇帝想怎么办这个事；</p><p>​        ③ 接下来，要落到实处，比如就是嘉靖皇帝要杀严嵩；</p><p>​        ④ 然后，要树立一个锦衣卫形象，并且他得知道三个事：自己为谁办事，解决什么事，怎么办。</p><p>借助这个故事，总结动态代理的实现步骤：</p><p>​        ① 首先，有一个杀大臣的接口 Kill</p><p>​        ② 如果一个皇帝想杀大臣他要怎么干，于是写一个实现杀大臣接口的实现类</p><p>​        ③ 新建一个嘉靖杀严嵩的实例对象</p><p>​        ④ 用代理的方式树立一个锦衣卫形象，并告诉他，作为代理人，他的幕后主使是皇帝（目标类），需求是杀大臣（接口），怎么办（InvocationHandler        （targrt））</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">Proxy<span class="hljs-selector-class">.newProxyInstance</span>(<br>                target.getClass()<span class="hljs-selector-class">.getClassLoader</span>(), <span class="hljs-comment">// 目标类的类加载</span><br>                target<span class="hljs-selector-class">.getClass</span>()<span class="hljs-selector-class">.getInterfaces</span>(),  <span class="hljs-comment">// 代理需要实现的接口，可指定多个</span><br>                new DebugInvocationHandler(target)   <span class="hljs-comment">// 代理对象对应的自定义 InvocationHandler</span><br>        );<br></code></pre></td></tr></table></figure><pre><code class="hljs">public Object invoke(Object proxy, Method method, Object[] args) throws InvocationTargetException, IllegalAccessException &#123;    //调用方法之前，我们可以添加自己的操作    System.out.println(&quot;before method &quot; + method.getName());    Object result = method.invoke(target, args);    //调用方法之后，我们同样可以添加自己的操作    System.out.println(&quot;after method &quot; + method.getName());    return result;&#125;</code></pre><p><code>invoke()</code> 方法有下面三个参数：</p><ol><li><strong>proxy</strong> :动态生成的代理类</li><li><strong>method</strong> : 与代理类对象调用的方法相对应</li><li><strong>args</strong> : 当前 method 方法的参数</li></ol><p>也就是说：<strong>你通过<code>Proxy</code> 类的 <code>newProxyInstance()</code> 创建的代理对象在调用方法的时候，实际会调用到实现<code>InvocationHandler</code> 接口的类的 <code>invoke()</code>方法。</strong> 你可以在 <code>invoke()</code> 方法中自定义处理逻辑，比如在方法执行前后做什么事情。</p><p>总结：JDK 动态代理类使用步骤</p><ol><li>定义一个接口及其实现类；</li><li>自定义 <code>InvocationHandler</code> 并重写<code>invoke</code>方法，在 <code>invoke</code> 方法中我们会调用原生方法（被代理类的方法）并自定义一些处理逻辑；</li><li>通过 <code>Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</code> 方法创建代理对象；</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>畅想夏日</title>
    <link href="/2021/05/21/%E7%95%85%E6%83%B3%E5%A4%8F%E6%97%A5/"/>
    <url>/2021/05/21/%E7%95%85%E6%83%B3%E5%A4%8F%E6%97%A5/</url>
    
    <content type="html"><![CDATA[<p>盛夏，太阳把灼热的强光照射在大地上，蝉声就像白噪声一样持续不断，心情烦躁时听了愈加烦躁，但是午休时又能伴着规律的蝉声入眠，能睡得更香更沉。猫狗和人都害怕暴晒，所以都躲到阴凉中，困倦。只有绿色的植物显得更加精神和具有生气，明澈的河水也比往常更显得透亮与清凉。夏天的果蔬是最受人喜爱的，我们会在院子里自己种上一些果蔬，按照时令季节种植与采摘。我们用剪刀剪下一颗在阳光下把红到熟透的番茄，赞叹一下它的丰腴，也感恩这一季的风调雨顺，然后将其洗净，用细长的水果刀将其等分成八块，争取每一块中间都保留着完整的瓤，好让它晶莹的橙色看着就让人觉得酸溜溜的，不至于流的满切板都是。这时，拿一只洁白的果盘，把切好的番茄块整齐摆好，最后撒上一勺白糖，这就是独属于夏天的一份酸酸甜甜啦。</p><p>到了夏天，就不能少了我最爱吃的西瓜。西瓜，脆瓤的还是沙瓤的，我都喜欢，到底还是更喜欢脆瓤的，但是不管是哪种瓤，总归要冰镇一下的。冰镇西瓜也不麻烦，这是用不着冰箱的，我们有自己的好办法，只要从庭院里的水井中打上一桶冬暖夏凉的井水，然后将西瓜放入其中，一点不耽搁干别的事，过个把小时来取即可。要吃到好的西瓜，首先得学会选西瓜。选西瓜简直就是在赌石，都要仔细看纹路，检查一下蒂是否发枯，最经典的莫过于用手拍两下看看熟不熟，至于什么声音属于熟了，我到现在也没搞清楚。最紧张也最期待的莫过于开瓜的时刻，如果是一刀下去，瓜自己就开了，那么这就是最好的瓜，它就像一个成绩很好但是骄傲的学生，一点都不含蓄，淋漓尽致的展示了自己的优秀。当一颗西瓜一分为二，敞开肚皮对着我的时候，也是我幸福的烦恼开始的时刻，以前我会纠结于是用勺子挖着吃还是分块吃。现在我不会再有这样的烦恼了，因为一个人的话就可以在空调房里，一边看着综艺，不紧不慢的挖着吃，吃满足了就放在一旁，等会再吃，两个人或者多个人的话，那就切着吃，因为说笑间吃得会更有滋味，也更热闹些。</p><p>炽热的大太阳也不都是一无是处，阳光会让时光加速，阴雨要一天才能风干的衣服在盛夏晴天下仅仅需要三两个小时，当微风浮动衣物时，它们已经是吸满了阳光的味道。阳光还会与黄豆一起，在时间的催化下，酝酿出奶奶的黄豆酱，我从小见到的就是每年夏天放置在庭院中的酱缸。酱缸是中等体积的瓦缸，里面最初放入的是洗净的黄豆，中间还有一些工序我不知道，最后再以绿纱网封口，原谅我吧，夏天小男孩只会对游泳感兴趣，哪里会主动去了解这些事情呢。酱缸最害怕的就是阵雨，一场阵雨就能让前面的努力都化为乌有。所以，只要天色有变，就要紧急转移，保我方酱缸无虞。阳光会携带热量将水升温，这就是太阳能工作的基本原理。我们不用买太阳能，只要学习老辈人的智慧，将一个装满水的塑料桶上铺上一层塑料膜，盛夏的太阳发挥了一天的威力，傍晚时分水已经十分温热了，这时候我们用它冲一个澡。我通常喜欢最后留小半桶水，将桶举过头顶，突然倒扣，将水从头淋到脚，那是非常刺激的。</p><p>夏天的花是开的很盛的，我们要在院子里种上繁茂的花，花的颜色我要选粉红色的，纯白色的，不要一些艳俗的色彩，例如紫红色等。到时候花开的纷纷洋洋，一团一簇的，微风混合着各色花香，在夏天的气息里荡漾。我们不能偷懒，要时常修剪，以便能够节省养分，也为了美观。当用剪刀剪动花枝，一些花就忍不住随风散开了，下一场花雨，这是我们的粗鲁，却是她的浪漫。我不打算让散落的花瓣零落成泥碾作尘，我们还要靠她来堆肥呢。院子里的墙要刷成白色，再嵌入一个天蓝色的木窗。运气好的话，在晴空万里的天气，会有飞机在蔚蓝色的天空画上一道白色的尾迹。到时候我要搬出藤椅，加一杯茶，要是心情不错，就捧一本书，饶有兴致的看起来，累了就看看天，看看飞机，看看花，看看院墙和木窗，闻一闻茶香，闻一闻花香，也闻一闻书香。风一吹，可能就躺着睡着了，这就度过了一个闲适的下午。</p><p>屋檐伸出来的部分，铺上一层黄色的衰草，供雨水往下流淌，卧室的窗边的外面就种植芭蕉，雨天的晚上就能听那雨打芭蕉的声音了，这时候可以想自己的事，也可以畅想一下宋代的词人在听雨打芭蕉声的时候在思考些什么。</p><p>待续…</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>登录接口安全注意事项</title>
    <link href="/2021/04/27/%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <url>/2021/04/27/%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="登录接口安全"><a href="#登录接口安全" class="headerlink" title="登录接口安全"></a>登录接口安全</h1><h3 id="问题一-暴力破解"><a href="#问题一-暴力破解" class="headerlink" title="问题一 暴力破解"></a>问题一 暴力破解</h3><p>只要网站是暴露在公网的，那么很大概率上会被人盯上，尝试爆破这种简单且有效的方式：<br><strong>通过各种方式获得了网站的用户名之后，通过编写程序来遍历所有可能的密码，直至找到正确的密码为止</strong></p><p>解决方案</p><p>① <strong>验证码校验</strong></p><p>我可以在它密码错误达到一定次数时，增加验证码校验！比如我们设置，当用户密码错误达到3次之后，则需要用户输入图片验证码才可以继续登录操作</p><p><strong>缺陷</strong>：这样确实可以过滤掉一些非法的攻击，但是以目前的OCR技术来说的话，普通的图片验证码真的很难做到有效的防止机器人。</p><p>当然，我们也可以花钱购买类似于三方公司提供的滑动验证等验证方案，但是也并不是100%的安全，一样可以被破解</p><p>②<strong>登录限制</strong></p><p>那这时候又有同学说了，那我可以直接限制非正常用户的登录操作，当它密码错误达到一定次数时，直接拒绝用户的登录，隔一段时间再恢复。比如我们设置某个账号在登录时错误次数达到10次时，则5分钟内拒绝该账号的所有登录操作。</p><p><strong>缺陷</strong>：这样确实可以解决用户密码被爆破的问题。但是，这样会带来另一个风险：攻击者虽然不能获取到网站的用户信息，但是它可以让我们网站所有的用户都无法登录！</p><p>攻击者只需要无限循环遍历所有的用户名（<em>即使没有，随机也行</em>）进行登录，那么这些用户会永远处于锁定状态，导致正常的用户无法登录网站！</p><p>③<strong>IP限制</strong></p><p>既然直接针对用户名不行的话，我们可以针对IP来处理，直接把攻击者的IP封了不就万事大吉了嘛。我们可以设定某个IP下调用登录接口错误次数达到一定时，则禁止该IP进行登录操作。</p><p>缺陷：现在很多学校、公司都是使用同一个出口IP，如果直接按IP限制，可能会误杀其它正常的用户。攻击者完全可以在IP被封后切换VPN来攻击</p><p>④<strong>手机验证</strong></p><p>几乎所有的应用都会让用户绑定手机，一个是国家的实名制政策要求，第二个是手机基本上和身份证一样，基本上可以代表一个人的身份标识了。所以很多安全操作都是基于手机验证来进行的，登录也可以。</p><ol><li>当用户输入密码次数大于3次时，要求用户输入验证码（<em>最好使用滑动验证</em>）</li><li>当用户输入密码次数大于10次时，弹出手机验证，需要用户使用手机验证码和密码双重认证进行登录</li></ol><p>我们结合了上面说的几种方式的同时，加上了手机验证码的验证模式，基本上可以阻止相当多的一部分恶意攻击者。但是<strong>没有系统是绝对安全的，我们只能够尽可能的增加攻击者的攻击成本。大家可以根据自己网站的实际情况来选择合适的策略。</strong></p><h3 id="问题二-中间人攻击"><a href="#问题二-中间人攻击" class="headerlink" title="问题二 中间人攻击"></a>问题二 中间人攻击</h3><h4 id="什么是中间人攻击"><a href="#什么是中间人攻击" class="headerlink" title="什么是中间人攻击"></a><strong>什么是中间人攻击</strong></h4><p>**中间人攻击(man-in-the-middle attack, abbreviated to MITM)**，简单一点来说就是，A和B在通讯过程中，攻击者通过嗅探、拦截等方式获取或修改A和B的通讯内容。</p><p>举个栗子：<code>小白</code>给<code>小黄</code>发快递，途中要经过快递点A，<code>小黑</code>就躲在快递点A，或者干脆自己开一个快递点B来冒充快递点A。然后偷偷的拆了<code>小白</code>给<code>小黄</code>的快递，看看里面有啥东西。甚至可以把<code>小白</code>的快递给留下来，自己再打包一个一毛一样的箱子发给<code>小黄</code>。</p><p>那在登录过程中，如果攻击者在嗅探到了从客户端发往服务端的登录请求，就可以很轻易的获取到用户的用户名和密码。</p><h4 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a><strong>HTTPS</strong></h4><p>防范中间人攻击最简单也是最有效的一个操作，更换HTTPS，把网站中所有的HTTP请求修改为强制使用HTTPS。</p><h4 id="为什么HTTPS可以防范中间人攻击？"><a href="#为什么HTTPS可以防范中间人攻击？" class="headerlink" title="为什么HTTPS可以防范中间人攻击？"></a><strong>为什么HTTPS可以防范中间人攻击？</strong></h4><p>HTTPS实际上就是在HTTP和TCP协议中间加入了SSL/TLS协议，用于保障数据的安全传输。相比于HTTP，HTTPS主要有以下几个特点：</p><ul><li>内容加密</li><li>数据完整性</li><li>身份验证</li></ul><blockquote><p>具体的HTTPS原理这里就不再扩展了，大家可以自行Google</p></blockquote><h4 id="加密传输"><a href="#加密传输" class="headerlink" title="加密传输"></a><strong>加密传输</strong></h4><p>在HTTPS之外，我们还可以手动对敏感数据进行加密传输：</p><ul><li>用户名可以在客户端使用非对称加密，在服务端解密</li><li>密码可以在客户端进行MD5之后传输，防止暴露密码明文</li></ul><h3 id="其它问题"><a href="#其它问题" class="headerlink" title="其它问题"></a><strong>其它</strong>问题</h3><p>除了上面我们聊的这些以外，其实还有很多其它的工作可以考虑，比如：</p><ul><li><p><strong>操作日志</strong>，用户的每次登录和敏感操作都需要记录日志（包括IP、设备等）</p></li><li><p><strong>异常操作或登录提醒</strong>，有了上面的操作日志，那我们就可以基于日志做风险提醒，比如用户在进行非常登录地登录、修改密码、登录异常时，可以短信提醒用户</p></li><li><p><strong>拒绝弱密码</strong> 注册或修改密码时，不允许用户设置弱密码</p></li><li><p><strong>防止用户名被遍历</strong> 有些网站在注册时，在输入完用户名之后，会提示用户名是否存在。这样会存在网站的所有用户名被泄露的风险（<em>遍历该接口即可</em>），需要在交互或逻辑上做限制</p></li><li><p>MD5现在已经不是⼗分安全了，最好使<strong>sha256，sha512</strong>之类安全强度更⾼的散列加密算法。</p></li><li><p>⽤户名密码错误不要单⽅⾯提⽰，如果密码错误提⽰⽤户说密码错误这样攻击者就知道⽤户名是对的，下次攻击密码，所以不管是⽤户名还是密码错误都给出同样的提⽰：<strong>用户名或密码错误</strong>，或者别的不具体的提⽰的错误都可以。</p></li><li><p> 前端禁⽌⽤户输⼊导致<strong>sql注⼊</strong>的字符，后台也要做sql注⼊的防护。</p></li><li><p>不要在cookie中保留⽤户密码，如果⼀定要使⽤cookie实现⾃动登录，切记不要使⽤简单的⽤户名＋密码MD5保存到cookie，要把⽤户ID、⽤户名、过期时间、IP、不固定的salt等⼀起考虑进去，这个当然要可逆，服务端要进⾏解密才能验证⽤户⾃动登录有效。另外，cookie要设置为<strong>http only</strong>,这样就不能通过脚本访问cookie，保证cookie的安全性。</p></li><li><p>有必要的要采⽤<strong>单点登陆</strong>，如果允许⽤户多处登录的要给⽤户安全提醒。</p></li><li><p>可以考虑使⽤<strong>第三方授权登录接⼝</strong>，如qq登录，微信登录，微博登录，github登录等等，优化⽤户登录体验。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>项目功能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>科研进展</title>
    <link href="/2021/04/26/%E7%A7%91%E7%A0%94%E8%BF%9B%E5%B1%95/"/>
    <url>/2021/04/26/%E7%A7%91%E7%A0%94%E8%BF%9B%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<p>FDA+IRS+BeamForming实现保密通信</p><p><img src="/2021/04/26/%E7%A7%91%E7%A0%94%E8%BF%9B%E5%B1%95/adb6ec4d537c830a8c976b1f566f855.jpg" alt="adb6ec4d537c830a8c976b1f566f855"></p><p><img src="/2021/04/26/%E7%A7%91%E7%A0%94%E8%BF%9B%E5%B1%95/image-20210426150601698.png" alt="image-20210426150601698"></p><p><img src="/2021/04/26/%E7%A7%91%E7%A0%94%E8%BF%9B%E5%B1%95/image-20210426150625503.png" alt="image-20210426150625503"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HashMap底层原理</title>
    <link href="/2021/04/22/HashMap%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    <url>/2021/04/22/HashMap%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><p>hashMap的默认容量是16，默认扩容因子是0.75，这是综合了空间和时间两个方面考虑的。扩容因子太小，hashMap就会经常扩容，扩容因子太大，就会导致hash冲突现象严重。</p><p>hashMap的底层是数组加链表(JDK1.8后改为数组加链表/红黑树，一个hash桶的元素大于8并且hashMap的容量大于等于64时，使用红黑树结构，如果桶的元素变为6，就重新变为链表，为什么是6，是为了防止红黑树和链表来回转换)经过计算，在hash函数设计合理的情况下，发生hash碰撞8次的几率为百万分之6，8就够用了。</p><p>这里hash值的计算hashMap重新定义了，JDK1.7的算法比较复杂，JDK1.8是让hashcode的前16位与后16位进行亦或计算，目的是为了让hash的取值平均一点，不要让太多的对象放在同一个hash桶中。为什么这样设计：</p><p>一定要尽可能降低hash碰撞，越分散越好；降低的原因：如果hashcode的散列做的不好，导致hashcode的后面几位很容易出现相同，出现hash碰撞现象，重新计算hash值可以减少这个问题的发生。</p><p>算法一定要尽可能高效，因为这是高频操作, 因此采用位运算；</p><p>计算桶的位置，是用hash值与hashMap的容量减一进行与运算。</p><p>hashMap的默认容量是16，也可以自己设置，但是必须是2的n次方，如果不是，则向上取为2的n次方，如设置容量为10，则实际容量为16.</p><p><img src="/2021/04/22/HashMap%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/clip_image002.gif" alt="IMG_256"></p><p>JDK1.8hashMap的优化：</p><p>\1.    数组+链表改成了数组+链表或红黑树；</p><p>\2.    链表的插入方式从头插法改成了尾插法，简单说就是插入时，如果数组位置上已经有元素，1.7将新元素放到数组中，原始节点作为新节点的后继节点，1.8遍历链表，将元素放置到链表的最后；</p><p>\3.    扩容的时候1.7需要对原数组中的元素进行重新hash定位在新数组的位置，1.8采用更简单的判断逻辑，位置不变或索引+旧容量大小；</p><p>\4.    在插入时，1.7先判断是否需要扩容，再插入，1.8先进行插入，插入完成再判断是否需要扩容；</p><p>为什么这样优化：</p><p>1.防止发生hash冲突，链表长度过长，将时间复杂度由O(n)降为O(logn);</p><p>2.因为1.7头插法扩容时，头插法会使链表发生反转，多线程环境下会产生环；</p><p>3.这是由于扩容是扩大为原数组大小的2倍，用于计算数组位置的掩码仅仅只是高位多了一个1。即hash的新一位是1，位置需要发生变化，如果是0，就保持不变。</p><p>JDK1.8的hasnMap仍然是线程不安全的，会出现覆盖数据的现象，但不会发生死锁了。以1.8为例，当A线程判断index位置为空后正好挂起，B线程开始往index位置的写入节点数据，这时A线程恢复现场，执行赋值操作，就把A线程的数据给覆盖了；还有++size这个地方也会造成多线程同时扩容等问题。‘</p><p>HashTable是直接在操作方法上加synchronized关键字，锁住整个数组，粒度比较大，Collections.synchronizedMap是使用Collections集合工具的内部类，通过传入Map封装出一个SynchronizedMap对象，内部定义了一个对象锁，方法内通过对象锁实现；ConcurrentHashMap使用分段锁，降低了锁粒度，让并发度大大提高。</p><p>hashMap的无序的，如果想实现有序的HashMap，可以使用 LinkedHashMap 和 TreeMap， LinkedHashMap内部维护了一个单链表，有头尾节点，同时LinkedHashMap节点Entry内部除了继承HashMap的Node属性，还有before 和 after用于标识前置节点和后置节点。可以实现按插入的顺序或访问顺序排序；TreeMap是按照Key的自然顺序或者Comprator的顺序进行排序，内部是通过红黑树来实现。所以要么key所属的类实现Comparable接口，或者自定义一个实现了Comparator接口的比较器，传给TreeMap用于key的比较。</p><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><p>ConcurrentHashMap成员变量使用volatile 修饰，免除了指令重排序，同时保证内存可见性，另外使用CAS操作和synchronized结合实现赋值操作，多线程操作只会锁住当前操作索引的节点。</p><p>ConcurrentHashMap可以做到读取数据不加锁，并且其内部的结构可以让其在进行写操作的时候能够将锁的粒度保持地尽量地小，不用对整个ConcurrentHashMap加锁。</p><p>即线程A锁住A节点所在链表，线程B锁住B节点所在链表，操作互不干涉。</p><p>ConcurrentHashMap比HashMap多了一次hash过程，即经历了两次hash过程，第1次hash定位到Segment，第2次hash定位到HashEntry，然后链表搜索找到指定节点。</p><p>第一次hash的过程：</p><p>hash &gt;&gt;&gt; (32-sshift) = hash &gt;&gt;&gt; segmentShift</p><p>其中，2的sshift次方是Segment数量，假设，sshift为4，则Segment的数量为16，而hash经过上面计算，右移了28位，只剩最高为的4个值，这样就可以计算数据应该存放在哪个Segment桶中。</p><p>第二次hash的过程，和普通hashMap一样，和2的n次方减1进行与运算。JDK1.7版本，一个Segment内部可以单独看成一个HashMap，经过与运算，把数据存放在当前Segement的hash桶中，如果同一个桶中有多个数据，则使用链表结构。</p><p>concurrencyLevel： ConcurrentHashMap内部的Segment的数量。</p><p>concurrencyLevel一经指定，便不能再次改变，原因也很简单，简化元素增多时的rehash过程，若Segment的数量也随元素的增加而进行扩容，则需要进行两次rehash，需要处理全部元素，效率较低。</p><p>ConcurrentHashMap不会增加Segment的数量，而只会增加Segment中链表数组的容量大小，这样的好处是扩容过程不需要对整个ConcurrentHashMap做rehash，而只需要对Segment里面的元素做一次rehash就可以了。</p><p>ConcurrentHashMap的put方法与普通HashMap类似，remove方法需要注意；</p><p>由于，HashEntry中的next是final的，一经赋值以后就不可修改，在定位到待删除元素的位置以后，程序就将待删除元素前面的那一些元素全部复制一遍，然后再一个一个重新接到链表上去：</p><p>// 原有链表：</p><p>1–&gt;2–&gt;3–&gt;4–&gt;5</p><p>// 删除节点3，新的链表为：</p><p>2–&gt;1–&gt;4–&gt;5</p><p>JDK1.8之后，弃用了Segment，改用数组加链表以及红黑树的方式，和普通的hashMap一样了。JDK1.8之后采用了原子类，通过CAS和Synchronized来完成数据的可靠性。JDK1.7之前，时对整个Segment加锁，而1.8是对数组种的一个元素Node来加锁，一个Node包含了key，value值，锁的粒度更小。</p><h2 id="解决hashmaphash冲突常用的方法："><a href="#解决hashmaphash冲突常用的方法：" class="headerlink" title="解决hashmaphash冲突常用的方法："></a>解决hashmaphash冲突常用的方法：</h2><p>\1.    开放地址法：发送hash冲突时，就对对象的hahs值加1，重新计算位置，直到找到空置位为止。</p><p>\2.    再hash法：发送hash冲突，就使用其他的方法计算hashcode，直到不冲突为止</p><p>\3.    链地址法：发送hash冲突时，以链表的形式，把不同的对象存在同一个位置。</p><p>\4.    建立公共溢出栈：建立一个溢出表，把所有hash冲突的对象都放在这个表中</p>]]></content>
    
    
    
    <tags>
      
      <tag>集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础知识阶段性整理</title>
    <link href="/2021/04/22/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E9%98%B6%E6%AE%B5%E6%80%A7%E6%95%B4%E7%90%86/"/>
    <url>/2021/04/22/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E9%98%B6%E6%AE%B5%E6%80%A7%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h4 id="01-谈谈对面向对象思想的理解"><a href="#01-谈谈对面向对象思想的理解" class="headerlink" title="01 谈谈对面向对象思想的理解"></a>01 谈谈对面向对象思想的理解</h4><p>首先，谈谈“面向过程”vs“面向对象”</p><p>我觉得这两者是思考角度的差异，面向过程更多是以“执行者”的角度来思考问题，而面向对象更多是以“组织者”的角度来思考问题，举个例子，比如我要产生一个0-10之间的随机数，如果以“面向过程”的思维，那我更多是关注如何去设计一个算法，然后保证比较均衡产生0-10的随机数，而面向对象的思维会更多关注，我找谁来帮我们做这件事，比如Random类，调用其中提供的方法即可。</p><h4 id="02-JDK，JRE，JVM有什么区别？"><a href="#02-JDK，JRE，JVM有什么区别？" class="headerlink" title="02 JDK，JRE，JVM有什么区别？"></a><strong>02 JDK，JRE，JVM有什么区别？</strong></h4><ul><li>JDK ：Java Development Kit，Java开发工具包，提供了Java的开发环境和运行环境。</li><li>包含了编译Java源文件的编译器Javac，还有调试和分析的工具。</li><li>JRE ：Java Runtime Environment，Java运行环境，包含Java虚拟机及一些基础类库</li><li>JVM ：Java Virtual Machine，Java虚拟机，提供执行字节码文件的能力</li></ul><p>所以，如果只是运行Java程序，只需要安装JRE即可。</p><p>另外注意，JVM是实现Java跨平台的核心，但JVM本身并不是跨平台的，</p><p><strong>不同的平台需要安装不同的JVM</strong></p><p><img src="/2021/04/22/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E9%98%B6%E6%AE%B5%E6%80%A7%E6%95%B4%E7%90%86/v2-199da3b71771a2ac8a6abca871d2bca2_b.jpg" alt="img"></p><h4 id="03-和equals的区别"><a href="#03-和equals的区别" class="headerlink" title="03 ==和equals的区别"></a>03 ==和equals的区别</h4><ol><li>基本数据类型存在栈内存中</li><li>引用数据类型地址值存在栈内存中，引用对象存在堆内存中</li></ol><p>== 比较的是值</p><ol><li>比较基本的数据类型，比较的是数值</li><li>比较引用类型：比较引用指向的值（地址）</li></ol><p>equals</p><p><strong>默认比较也是地址，因为这个方法的最初定义在Object上，默认的实现就是比较地址</strong></p><p>自定义的类，如果需要比较的是内容，那么就要学String，重写equals方法</p><h4 id="04-final的作用"><a href="#04-final的作用" class="headerlink" title="04 final的作用"></a>04 final的作用</h4><ol><li>final修饰类，表示类不可变，不可继承 比如，String，不可变性</li><li>final修饰方法，表示该方法不可重写</li><li>final修饰变量，这个变量就是常量</li></ol><p>注意：</p><ol><li>修饰的是基本数据类型，这个值本身不能修改</li><li><strong>修饰的是引用类型，引用的指向不能修改</strong></li></ol><p><strong>比如下面的代码是可以的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Student student = <span class="hljs-keyword">new</span> Student(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;Andy&quot;</span>);<br>student.setAge(<span class="hljs-number">18</span>);<span class="hljs-comment">//注意，这个是可以的！</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">student = <span class="hljs-keyword">new</span> Student();<span class="hljs-comment">//这个不可以！</span><br></code></pre></td></tr></table></figure><h4 id="05-String-s-“java”与String-s-new-String-“java”"><a href="#05-String-s-“java”与String-s-new-String-“java”" class="headerlink" title="05 String s = “java”与String s = new String(“java”)"></a>05 String s = “java”与String s = new String(“java”)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String s = <span class="hljs-string">&quot;java&quot;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String s = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;java&quot;</span>);<br></code></pre></td></tr></table></figure><p>这两者的内存分配方式是不一样的。</p><p><strong>第一种方式，JVM会将其分配到常量池，而第二种方式是分配到堆内存</strong></p><p>代码案例：测试以下的每道题，你是否能够正确得到答案？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">String s1 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;zs&quot;</span>);<br>String s2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;zs&quot;</span>);<br>System.out.println(s1 == s2);<span class="hljs-comment">//false，存在于两个不同的堆内存</span><br><br>String s3 = <span class="hljs-string">&quot;zs&quot;</span>;<br>String s4 = <span class="hljs-string">&quot;zs&quot;</span>;<br>System.out.println(s3 == s4);<span class="hljs-comment">//相当于常量比较，true</span><br>System.out.println(s3 == s1);<span class="hljs-comment">//常量池地址和堆地址,false</span><br><br>String s5 = <span class="hljs-string">&quot;zszs&quot;</span>;<br>String s6 = s3+s4;<br>System.out.println(s5 == s6);<span class="hljs-comment">//false 一个常量池地址，一个堆地址（String是不可变对象，当使用拼接符号时，会new一个新对象，所以是对应堆地址）</span><br><br><span class="hljs-keyword">final</span> String s7 = <span class="hljs-string">&quot;zs&quot;</span>;<br><span class="hljs-keyword">final</span> String s8 = <span class="hljs-string">&quot;zs&quot;</span>;<br>String s9 = s7+s8;<span class="hljs-comment">//对于常量（final修饰），编译器在拼接时会进行优化，拼接后还是常量</span><br>System.out.println(s5 == s9);<span class="hljs-comment">//true</span><br><br><span class="hljs-keyword">final</span> String s10 = s3+s4;<br>System.out.println(s5 == s10);<span class="hljs-comment">//false 常量池和堆内存</span><br><br></code></pre></td></tr></table></figure><h4 id="06-String，StringBuffer，StringBuilder区别"><a href="#06-String，StringBuffer，StringBuilder区别" class="headerlink" title="06 String，StringBuffer，StringBuilder区别"></a>06 String，StringBuffer，StringBuilder区别</h4><p><strong>String 跟其他两个类的区别是</strong></p><blockquote><p>String是final类型，每次声明的都是不可变的对象，<br>所以每次操作都会产生新的String对象，然后将指针指向新的String对象。</p></blockquote><p><strong>StringBuffer，StringBuilder都是在原有对象上进行操作</strong></p><blockquote><p>所以，如果需要经常改变字符串内容，则建议采用这两者。</p></blockquote><p><strong>StringBuffer vs StringBuilder</strong></p><blockquote><p>前者是线程安全的（每个方法都加了synchronized修饰），后者是线程不安全的。<br>线程不安全性能更高，所以在开发中，优先采用StringBuilder.<strong>因为局部变量每个线程独享，根本不存在线程安全问题。</strong>例如add()方法调用，对应虚拟机栈栈帧，是线程私有的。也即是说每个线程里面都有一份数据，并不会影响操作结果。当多个线程访问同一个资源时才会出现线程安全问题，此时的场景中并不会发生这个问题。<br>StringBuilder &gt; StringBuffer &gt; String</p></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">一个对象是线程安全的？<br><span class="hljs-number">1</span>、多线程环境下<br><span class="hljs-number">2</span>、对这个对象的访问不加额外的同步控制（<span class="hljs-keyword">synchronized</span>等）<br><span class="hljs-number">3</span>、操作的数据的结果依然是正确的<br></code></pre></td></tr></table></figure><h4 id="07-接口和抽象类的区别"><a href="#07-接口和抽象类的区别" class="headerlink" title="07 接口和抽象类的区别"></a>07 接口和抽象类的区别</h4><p>这个问题，要分JDK版本来区分回答：</p><ul><li><p>JDK 1.8之前：</p></li><li><ul><li><p>语法：</p></li><li><ul><li>抽象类：方法可以有抽象的，也可以有非抽象, 有构造器</li><li>接口：方法都是抽象，属性都是常量，默认有public static final修饰</li></ul></li><li><p>设计：</p></li><li><ul><li>抽象类：同一类事物的抽取，比如针对 Dao 层操作的封装，如，BaseDao，BaseServiceImpl</li><li>接口：通常更像是一种标准的制定，定制系统之间对接的标准</li><li>例子：</li><li>1，单体项目，分层开发，interface作为各层之间的纽带，在controller中注入IUserService，在Service注入IUserDao</li><li>2，分布式项目，面向服务的开发，抽取服务service，这个时候，就会产生服务的提供者和服务的消费者两个角色</li><li>这两个角色之间的纽带，依然是接口</li></ul></li></ul></li><li><p>JDK 1.8之后：</p></li><li><ul><li>接口里面可以有实现的方法，注意要在方法的声明上加上default或者static</li></ul></li></ul><p>最后区分几个概念：</p><ul><li><p>多继承，多重继承，多实现</p></li><li><ul><li>多重继承：A-&gt;B-&gt;C（爷孙三代的关系）</li><li>多实现：Person implements IRunable ,IEatable（符合多项国际化标准）</li><li>多继承：接口可以多继承，类只支持单继承</li></ul></li></ul><h4 id="08-09-N的阶乘和斐波那契数列"><a href="#08-09-N的阶乘和斐波那契数列" class="headerlink" title="08 09 N的阶乘和斐波那契数列"></a>08 09 N的阶乘和斐波那契数列</h4><p>什么是递归？</p><blockquote><p>递归，就是方法内部调用方法自身<br>递归的注意事项：<br>找到规律，编写递归公式<br>找到出口（边界值），让递归有结束边界<br>注意：如果递归太多层，或者没有正确结束递归，则会出现“栈内存溢出Error”！<br>问题：为什么会出现栈内存溢出，而不是堆内存溢出？</p></blockquote><h4 id="10-什么是向上转型？什么是向下转型？"><a href="#10-什么是向上转型？什么是向下转型？" class="headerlink" title="10 什么是向上转型？什么是向下转型？"></a>10 什么是向上转型？什么是向下转型？</h4><p>举例说明即可：</p><blockquote><p>向上转型：Person person = new Student(); 安全的<br>向下转型：Teacher teacher = (Teacher)person; 不安全的</p></blockquote><h4 id="11-Int和Integer的区别（重点）"><a href="#11-Int和Integer的区别（重点）" class="headerlink" title="11 Int和Integer的区别（重点）"></a>11 Int和Integer的区别（重点）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer i1 = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">12</span>);<br>      Integer i2 = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">12</span>);<br>      System.out.println(i1 == i2);<br><br>      Integer i3 = <span class="hljs-number">126</span>;<br>      Integer i4 = <span class="hljs-number">126</span>;<br>      <span class="hljs-keyword">int</span> i5 = <span class="hljs-number">126</span>;<br>      System.out.println(i3 == i4);<br>      System.out.println(i3 == i5);<br><br>      Integer i6 = <span class="hljs-number">128</span>;<br>      Integer i7 = <span class="hljs-number">128</span>;<br>      <span class="hljs-keyword">int</span> i8 = <span class="hljs-number">128</span>;<br>      System.out.println(i6 == i7);<br>      System.out.println(i6 == i8);<br><br><br></code></pre></td></tr></table></figure><p>答案揭晓</p><p>分情况来比较</p><ul><li>都定义为Integer的比较：</li></ul><blockquote><p>new：一旦new，就是开辟一块新内存，结果肯定是false<br>不new：<br>看范围<br><strong>Integer做了缓存，-128至127，当你取值在这个范围的时候，会采用缓存的对象，所以会相等</strong><br><strong>当不在这个范围，内部创建新的对象，此时不相等</strong></p></blockquote><ul><li>Integer和int的比较：</li></ul><blockquote><p><strong>实际比较的是数值，Integer会做拆箱的动作，来跟基本数据类型做比较</strong><br><strong>此时跟是否在缓存范围内或是否new都没关系</strong></p></blockquote><p>源码分析：</p><blockquote><p>当我们写</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Integer</span> i = <span class="hljs-number">126</span><br></code></pre></td></tr></table></figure><p>,实际上做了自动装箱：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Integer i = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>value<span class="hljs-constructor">Of(126)</span>;<br></code></pre></td></tr></table></figure><p>分析这段源码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title">valueOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)<br>        <span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Integer(i);<br>&#125;<br><span class="hljs-comment">//IntegerCache是Integer的内部类</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntegerCache</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> low = -<span class="hljs-number">128</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> high;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer cache[];<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">// high value may be configured by property</span><br>        <span class="hljs-keyword">int</span> h = <span class="hljs-number">127</span>;<br><br><br></code></pre></td></tr></table></figure><h4 id="12-方法的重写和重载的区别"><a href="#12-方法的重写和重载的区别" class="headerlink" title="12 方法的重写和重载的区别"></a>12 方法的重写和重载的区别</h4><ul><li>重载：发生在一个类里面，方法名相同，参数列表不同（混淆点：跟返回类型没关系）</li></ul><blockquote><p>以下不构成重载(如果方法名和参数列表一样，在调用方法时不知道选择哪一个)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br></code></pre></td></tr></table></figure></blockquote><ul><li>重写：发生在父类子类之间的，方法名相同，参数列表相同,返回值类型相同或者子类的返回值类型为父类的子类。</li></ul><h4 id="13-冒泡排序"><a href="#13-冒泡排序" class="headerlink" title="13 冒泡排序"></a>13 冒泡排序</h4><p>每次冒泡排序都会对相邻的两个元素进行比较，如果前面的元素比后面的元素大，则进行互换，一次冒泡会至少让一个元素移动到它应该在的位置。（第一次冒泡就是让最大的数到最右边，第二次就是次大的到此最右的位置，以此类推）重复n次，就完成n个元素的排序工作。</p><p>关于上面的优化思考</p><blockquote><p>其实，当某次冒泡操作没有数据交换时，说明已经达到了完全有序，不用再继续后续的冒泡操作。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(array.length &lt;= <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//重复n次冒泡</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;array.length;i++)&#123;<br>        <span class="hljs-comment">//是否可以提交退出冒泡的标记</span><br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-comment">//相邻之间两两比较，并且每次减少一位参与比较</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;array.length-i-<span class="hljs-number">1</span>;j++)&#123;<br>            <span class="hljs-keyword">if</span>(array[j] &gt; array[j+<span class="hljs-number">1</span>])&#123;<br>                <span class="hljs-comment">//需要交换</span><br>                <span class="hljs-keyword">int</span> temp = array[j];<br>                array[j] = array[j+<span class="hljs-number">1</span>];<br>                array[j+<span class="hljs-number">1</span>] = temp;<br>                <span class="hljs-comment">//</span><br>                flag = <span class="hljs-keyword">true</span>;<span class="hljs-comment">//有数据交换，不能提前退出</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!flag)&#123;<br>            <span class="hljs-comment">//没有数据交换，提前退出冒泡比较</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="15-List和Set的区别"><a href="#15-List和Set的区别" class="headerlink" title="15 List和Set的区别"></a>15 List和Set的区别</h4><ul><li>List（有序，可重复）</li><li>Set（无序，不可重复）</li></ul><h4 id="16-谈谈ArrayList和LinkedList的区别"><a href="#16-谈谈ArrayList和LinkedList的区别" class="headerlink" title="16 谈谈ArrayList和LinkedList的区别"></a>16 谈谈ArrayList和LinkedList的区别</h4><p><strong>1、底层数据结构的差异</strong></p><blockquote><p>ArrayList，<strong>数组</strong>，连续一块内存空间<br>LinkedList，<strong>双向链表</strong>，不是连续的内存空间</p></blockquote><p> <strong>2、一个常规的结论</strong></p><p>虽然不严谨，但也可以应付很多面试了</p><blockquote><p>ArrayList，查找快，因为是连续的内存空间，方便寻址，但删除，插入慢，因为需要发生数据迁移<br>LinkedList，查找慢，因为需要通过指针一个个寻找，但删除，插入块，因为只要改变前后节点的指针指向即可。</p><p><strong>查找分两种</strong>：</p><ul><li>查找第2个元素，ArrayList连续的内存空间，可计算偏移量，LinkedList只能一个一个找</li><li>查找b在哪？只能一个一个比较ArrayList，LinkedList</li><li>插入到中间，ArrayList要迁移数据</li><li>插入到末尾，ArrayList直接计算，LinkedList有first和last指针。last指针指向尾部。</li></ul></blockquote><p><strong>3、ArrayList细节分析</strong></p><p>1、增加</p><ul><li><ul><li><p>添加到末尾，正常不需要做特别的处理，除非现有的数组空间不够了，需要扩容</p></li><li><ul><li><p><strong>数组初始化容量多大？10，当你知道需要存储多少数据时，建议在创建的时候，直接设置初始化大小</strong></p></li><li><p><strong>怎么扩容？</strong></p></li><li><ul><li><strong>当发现容量不够之后，就进行扩容</strong></li><li><strong>按原先数组容量的1.5倍进行扩容，位运算，下面是关键的源码</strong></li></ul></li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> oldCapacity = elementData.length;<br><span class="hljs-keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>);<span class="hljs-comment">//位运算更快</span><br></code></pre></td></tr></table></figure><ul><li><ul><li><ul><li><ul><li>再将原先数组的元素复制到新数组，Arrays</li></ul></li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">elementData = Arrays.copyOf(elementData, newCapacity)<br></code></pre></td></tr></table></figure><ul><li><ul><li>添加到其他位置，这个时候需要做整体的搬迁</li></ul></li><li><p>2、删除</p></li><li><ul><li>删除末尾，并不需要迁移</li><li>删除其他的位置，这个时候也需要搬迁</li></ul></li><li><p>3、修改</p></li><li><ul><li>修改之前，必须先定位</li><li>定位-查找- ArrayList（数组是一段连续的内存空间，定位会特别快）</li></ul></li><li><p>4、查找</p></li><li><ul><li>如上所述</li></ul></li></ul><p><strong>4、LinkedList 细节分析</strong></p><p>1、提供了的两个引用（first，last）</p><p>2、增加</p><p><strong>添加到末尾，创建一个新的节点，将之前的last节点设置为新节点的 pre ，新节点设置为last</strong></p><p>我们看下源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">linkLast</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    <span class="hljs-comment">//获取到最后一个节点</span><br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; l = last;<br>    <span class="hljs-comment">//构建一个新节点，将当前的last作为这个新节点的pre</span><br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> Node&lt;&gt;(l, e, <span class="hljs-keyword">null</span>);<br>    <span class="hljs-comment">//把last指向新节点</span><br>    last = newNode;<br>    <span class="hljs-comment">//如果原先没有最后一个节点</span><br>    <span class="hljs-keyword">if</span> (l == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-comment">//将first指向新节点</span><br>        first = newNode;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-comment">//否则，将原先的last的next指向新节点</span><br>        l.next = newNode;<br>    size++;<br>    modCount++;<br>&#125;<br>Node节点的定义：内部类<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;<br>    E item;<br>    Node&lt;E&gt; next;<br>    Node&lt;E&gt; prev;<br>    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;<br>        <span class="hljs-keyword">this</span>.item = element;<br>        <span class="hljs-keyword">this</span>.next = next;<br>        <span class="hljs-keyword">this</span>.prev = prev;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加到其他位置，这个时候，就需要调整前后节点的引用指向</p><p>3、如何去定义一个双向链表的节点，如上述的源码所示</p><p>4、修改</p><p>修改最后一个节点或者第一个节点，那么就很快（first，last）</p><p>修改其他位置，如果是按坐标来定位节点，则会按照二分查找法，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (index &lt; (size &gt;&gt; <span class="hljs-number">1</span>)) &#123;<br>    Node&lt;E&gt; x = first;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; index; i++)<br>        x = x.next;<br>    <span class="hljs-keyword">return</span> x;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    Node&lt;E&gt; x = last;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = size - <span class="hljs-number">1</span>; i &gt; index; i--)<br>        x = x.prev;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><p>5、一个思考题，假如我们可以确定要存储1000个元素，那么采用ArrayList和LinkedList，</p><p>哪个更耗内存，为什么？</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-type">Linkedlist</span>更消耗内存，因为已经确定了元素个数，而<span class="hljs-type">LinkedList</span>不仅要存<span class="hljs-class"><span class="hljs-keyword">data</span>本身还要额外存pre和next指针。</span><br></code></pre></td></tr></table></figure><h4 id="17-LinkedList，要实现在A和B之间插入C，该如何实现，编写伪代码即可"><a href="#17-LinkedList，要实现在A和B之间插入C，该如何实现，编写伪代码即可" class="headerlink" title="17 LinkedList，要实现在A和B之间插入C，该如何实现，编写伪代码即可"></a>17 LinkedList，要实现在A和B之间插入C，该如何实现，编写伪代码即可</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">C.pre = A;<br><br>C.next = A.next;<br><br>A.next.pre = C;<br><br>A.next = C;<br></code></pre></td></tr></table></figure><h4 id="56-说说常用的聚合函数有哪些及作用？"><a href="#56-说说常用的聚合函数有哪些及作用？" class="headerlink" title="56 说说常用的聚合函数有哪些及作用？"></a>56 说说常用的聚合函数有哪些及作用？</h4><p><img src="/2021/04/22/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E9%98%B6%E6%AE%B5%E6%80%A7%E6%95%B4%E7%90%86/v2-a3d8312a2f5e4d69c034c64fcb5e91ee_b.jpg" alt="img"></p><p>基本使用语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(age) <span class="hljs-keyword">from</span> t_student;<br><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(age) <span class="hljs-keyword">from</span> t_student;<br></code></pre></td></tr></table></figure><p>聚合函数经常会结合分组查询，出现在众多的SQL笔试题中，对于SQL笔试题，唯有多练</p><h4 id="57-左连接，右连接，内连接，如何编写-SQL-，他们的区别是什么？"><a href="#57-左连接，右连接，内连接，如何编写-SQL-，他们的区别是什么？" class="headerlink" title="57 左连接，右连接，内连接，如何编写 SQL ，他们的区别是什么？"></a>57 左连接，右连接，内连接，如何编写 SQL ，他们的区别是什么？</h4><p><strong>左连接：以左表为主</strong></p><blockquote><p>select a.<em>,b.</em> from a left join b on a.b_id = b.id;</p></blockquote><p><strong>右连接：以右表为主</strong></p><blockquote><p>select a.<em>,b.</em> from a right join b on a.b_id = b.id;</p></blockquote><p><strong>内连接：只列出两张表关联查询符合条件的记录</strong></p><blockquote><p>select a.<em>,b.</em> from a inner join b on a.b_id = b.id;</p></blockquote><p>案例：</p><p>select t.id t_id,t.<code>name</code> t_name,c.id c_id,c.<code>name</code> c_name</p><p> from t_teacher t LEFT JOIN t_class c on t.id= c.t_id; #4条，以老师表为主</p><p>select t.id t_id,t.<code>name</code> t_name,c.id c_id,c.<code>name</code> c_name</p><p> from t_teacher t RIGHT JOIN t_class c on t.id=c.t_id; #4条，以班级表为主</p><p>select t.id t_id,t.<code>name</code> t_name,c.id c_id,c.<code>name</code> c_name</p><p> from t_teacher t INNER JOIN t_class c on t.id=c.t_id; #3条，只展示匹配条件的记录</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生鲜项目总结</title>
    <link href="/2021/04/14/%E7%94%9F%E9%B2%9C%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <url>/2021/04/14/%E7%94%9F%E9%B2%9C%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p><img src="/2021/04/14/%E7%94%9F%E9%B2%9C%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/%E7%94%9F%E9%B2%9C%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93.jpg" alt="生鲜项目总结"></p>]]></content>
    
    
    
    <tags>
      
      <tag>项目总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面经问题整理</title>
    <link href="/2021/03/23/%E9%9D%A2%E7%BB%8F%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <url>/2021/03/23/%E9%9D%A2%E7%BB%8F%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h4 id="1、Get和Post请求的区别"><a href="#1、Get和Post请求的区别" class="headerlink" title="1、Get和Post请求的区别"></a>1、Get和Post请求的区别</h4><ul><li><p>哪一些情况下，浏览器会发送get请求</p><p>​        a. 直接在浏览器地址栏输入某个地址</p><p>​        b. 点击链接</p><p>​        c. 表单默认的提交方式</p></li><li><p> 哪一些情况下，浏览器会发送post请求？</p></li></ul><p>  ​        a. 设置表单method = “post”</p><ul><li> get请求的特点</li></ul><p>  ​        a. 请求参数会添加到请求资源路劲的后面，只能添加少量参数（因为请求行只有一行，大约只能存放2K左右的数据）（2K左右的数据，看起来也不少。。。）</p><p>  ​        b. 请求参数会显示在浏览器地址栏，路由器会记录请求地址（不安全，容易泄露信息）</p><ul><li> post请求的特点</li></ul><p>  ​        a. 请求参数添加到实体内容里面，可以添加大量的参数（也解释了<strong>为什么浏览器地址栏不能发送post请求，在地址栏里我们只能填写URL，并不能进入到Http包的实体当中</strong>）</p><p>  ​        b. <strong>相对安全</strong>，但是<strong>post请求不会对请求参数进行加密处理</strong>（可以使用<strong>https协议来保证数据安全</strong>）。</p>]]></content>
    
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生鲜项目中的实现细节</title>
    <link href="/2021/03/22/%E7%94%9F%E9%B2%9C%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82/"/>
    <url>/2021/03/22/%E7%94%9F%E9%B2%9C%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82/</url>
    
    <content type="html"><![CDATA[<h4 id="1、统一异常"><a href="#1、统一异常" class="headerlink" title="1、统一异常"></a>1、统一异常</h4><ul><li>我们需要对这些异常进行统一的捕获并处理。SpringBoot中有一个<strong>ControllerAdvice的注解</strong>，<strong>使用该注解表示开启了全局异常的捕获</strong>，我们只需在自定义一个方法使用<strong>ExceptionHandler注解</strong>然后定义<strong>捕获异常的类型</strong>即可<strong>对这些捕获的异常进行统一的处理</strong>。如下为<strong>全局异常处理类</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shu.mall.exception;<br><br><span class="hljs-keyword">import</span> com.shu.mall.common.ApiRestResponse;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.validation.BindingResult;<br><span class="hljs-keyword">import</span> org.springframework.validation.ObjectError;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.MethodArgumentNotValidException;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//使用该注解代表开启了全局异常捕获</span><br><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GlobalExceptionHandler</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Logger log = LoggerFactory.getLogger(GlobalExceptionHandler.class);<br>    <span class="hljs-comment">//处理默认异常</span><br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">handleException</span><span class="hljs-params">(Exception e)</span></span>&#123;<br>    log.error(<span class="hljs-string">&quot;Default Exception:&quot;</span> ,e);<br>        <span class="hljs-keyword">return</span> ApiRestResponse.error(LiveMallExceptionEnum.SYSTEM_ERROR);<br>    &#125;<br>    <br>    <span class="hljs-comment">//处理业务相关的自定义异常</span><br>    <span class="hljs-meta">@ExceptionHandler(LiveMallException.class)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">handleLiveMallException</span><span class="hljs-params">(LiveMallException e)</span></span>&#123;<br>        log.error(<span class="hljs-string">&quot;LiveMallException:&quot;</span> ,e);<br>        <span class="hljs-keyword">return</span> ApiRestResponse.error(e.getCode(),e.getMessage());<br>    &#125;<br>    <br>    <span class="hljs-comment">//处理参数校验异常</span><br>    <span class="hljs-meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ApiRestResponse <span class="hljs-title">handleMethodArgumentNotValidException</span><span class="hljs-params">(MethodArgumentNotValidException e)</span></span>&#123;<br>        log.error(<span class="hljs-string">&quot;MethodArgumentNotValidException:&quot;</span>+e);<br>        <span class="hljs-keyword">return</span> handleBindingResult(e.getBindingResult());<br>    &#125;<br>    <br>    <span class="hljs-comment">//把异常处理为对外暴露的提示</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> ApiRestResponse <span class="hljs-title">handleBindingResult</span><span class="hljs-params">(BindingResult result)</span></span>&#123; <br>        List&lt;String&gt; list =<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">if</span> (result.hasErrors()) &#123;<br>            List&lt;ObjectError&gt; allErrors = result.getAllErrors();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; allErrors.size(); i++) &#123;<br>                ObjectError objectError = allErrors.get(i);<br>                String defaultMessage = objectError.getDefaultMessage();<br>                list.add(defaultMessage);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (list.size()==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> ApiRestResponse.error(LiveMallExceptionEnum.REQUEST_PARAM_ERROR);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ApiRestResponse.error(LiveMallExceptionEnum.REQUEST_PARAM_ERROR.getCode(),list.toString());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>如上图代码可知，需要处理的异常分为默认异常、业务相关的异常和参数校验相关异常。在本项目中，业务相关的异常是LiveMallException异常（继承自RuntimeException），成员变量为状态码和状态信息：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shu.mall.exception;<br><br><span class="hljs-comment">//业务相关异常</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LiveMallException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RuntimeException</span></span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Integer code;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String message;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LiveMallException</span><span class="hljs-params">(Integer code, String message)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LiveMallException</span><span class="hljs-params">(String message, Integer code, String message1)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(message);<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.message = message1;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LiveMallException</span><span class="hljs-params">(String message, Throwable cause, Integer code, String message1)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(message, cause);<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.message = message1;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LiveMallException</span><span class="hljs-params">(Throwable cause, Integer code, String message)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(cause);<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LiveMallException</span><span class="hljs-params">(String message, Throwable cause, <span class="hljs-keyword">boolean</span> enableSuppression, <span class="hljs-keyword">boolean</span> writableStackTrace, Integer code, String message1)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(message, cause, enableSuppression, writableStackTrace);<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.message = message1;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LiveMallException</span><span class="hljs-params">(LiveMallExceptionEnum exceptionEnum)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>(exceptionEnum.getCode(),exceptionEnum.getMsg());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMessage</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>在异常处理中，使用到了<strong>自定义枚举</strong>。这个主要是在controller层写具体控制器的时候，作为统一返回对象的方法参数使用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">ApiRestResponse&lt;Object&gt; <span class="hljs-title">error</span><span class="hljs-params">(LiveMallExceptionEnum ex)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiRestResponse&lt;&gt;(ex.getCode(),ex.getMsg());<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shu.mall.exception;<br><span class="hljs-comment">//异常枚举</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">LiveMallExceptionEnum</span> </span>&#123;<br>    <br>    NEED_UESR_NAME(<span class="hljs-number">10001</span>,<span class="hljs-string">&quot;用户名不能为空&quot;</span>),<br>    NEED_PASSWORD(<span class="hljs-number">10002</span>,<span class="hljs-string">&quot;密码不能为空&quot;</span>),<br>    PASSWORD_TOO_SHORT(<span class="hljs-number">10003</span>,<span class="hljs-string">&quot;密码太短&quot;</span>),<br>    NAME_EXISTED(<span class="hljs-number">10004</span>,<span class="hljs-string">&quot;不允许重名&quot;</span>),<br>    INSERT_FAILED(<span class="hljs-number">10005</span>,<span class="hljs-string">&quot;插入失败，请重试&quot;</span>),<br>    WRONG_PASSWORD(<span class="hljs-number">10006</span>,<span class="hljs-string">&quot;密码错误&quot;</span>),<br>    NEED_LOGIN(<span class="hljs-number">10007</span>,<span class="hljs-string">&quot;用户未登录&quot;</span>),<br>    UPDATE_FAILED(<span class="hljs-number">10008</span>,<span class="hljs-string">&quot;更新失败&quot;</span>),<br>    NEED_ADMIN(<span class="hljs-number">10009</span>,<span class="hljs-string">&quot;无管理员权限&quot;</span>),<br>    PARA_NOT_NULL(<span class="hljs-number">10010</span>,<span class="hljs-string">&quot;名字不能为空&quot;</span>),<br>    CREATE_FAILED(<span class="hljs-number">10011</span>,<span class="hljs-string">&quot;创建失败&quot;</span>),<br>    REQUEST_PARAM_ERROR(<span class="hljs-number">10012</span>,<span class="hljs-string">&quot;请求参数失败&quot;</span>),<br>    DELETE_FAILED(<span class="hljs-number">10013</span>,<span class="hljs-string">&quot;删除失败&quot;</span>),<br>    MKDIR_FAILED(<span class="hljs-number">10014</span>,<span class="hljs-string">&quot;文件夹创建失败&quot;</span>),<br>    UPLOAD_FAILED(<span class="hljs-number">10015</span>,<span class="hljs-string">&quot;上传失败&quot;</span>),<br>    NOT_SALE(<span class="hljs-number">10016</span>, <span class="hljs-string">&quot;商品状态不可售&quot;</span>),<br>    NOT_ENOUGH(<span class="hljs-number">10017</span>, <span class="hljs-string">&quot;商品库存不足&quot;</span>),<br>    CART_EMPTY(<span class="hljs-number">10018</span>, <span class="hljs-string">&quot;购物车已勾选的商品为空&quot;</span>),<br>    NO_ENUM(<span class="hljs-number">10019</span>, <span class="hljs-string">&quot;未找到对应的枚举&quot;</span>),<br>    NO_ORDER(<span class="hljs-number">10020</span>, <span class="hljs-string">&quot;订单不存在&quot;</span>),<br>    NOT_YOUR_ORDER(<span class="hljs-number">10021</span>, <span class="hljs-string">&quot;订单不属于你&quot;</span>),<br>    WRONG_ORDER_STATUS(<span class="hljs-number">10022</span>, <span class="hljs-string">&quot;订单状态不符&quot;</span>),<br>    SYSTEM_ERROR(<span class="hljs-number">20000</span>,<span class="hljs-string">&quot;系统错误&quot;</span>);<br><br>    Integer code;<br>    String msg;<br>    <br>    LiveMallExceptionEnum(Integer code, String msg) &#123;<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCode</span><span class="hljs-params">(Integer code)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMsg</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMsg</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;LiveMallExceptionEnum&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;code=&quot;</span> + code +<br>                <span class="hljs-string">&quot;, msg=&#x27;&quot;</span> + msg + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2、参数校验"><a href="#2、参数校验" class="headerlink" title="2、参数校验"></a>2、参数校验</h4><ul><li>如果不用参数校验，原始的就是if语句，那就太傻了…..</li><li>我们不傻，我们在请求类中用valid参数校验</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shu.mall.model.request;<br><br><span class="hljs-keyword">import</span> javax.validation.constraints.Max;<br><span class="hljs-keyword">import</span> javax.validation.constraints.NotNull;<br><span class="hljs-keyword">import</span> javax.validation.constraints.Size;<br><br><span class="hljs-comment">//添加目录的请求类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddCategoryReq</span> </span>&#123;<br>    <span class="hljs-meta">@Size(min =2,max=5)</span><br>    <span class="hljs-meta">@NotNull(message = &quot;name:不能为null&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Max(3)</span><br>    <span class="hljs-meta">@NotNull(message = &quot;type:不能为null&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer type;<br>    <span class="hljs-meta">@NotNull(message = &quot;parentId:不能为null&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer parentId;<br>    <span class="hljs-meta">@NotNull(message = &quot;orderNum:不能为null&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer orderNum;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getType</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> type;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setType</span><span class="hljs-params">(Integer type)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.type = type;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getParentId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> parentId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setParentId</span><span class="hljs-params">(Integer parentId)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.parentId = parentId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getOrderNum</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> orderNum;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setOrderNum</span><span class="hljs-params">(Integer orderNum)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.orderNum = orderNum;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;AddCategoryReq&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, type=&quot;</span> + type +<br>                <span class="hljs-string">&quot;, parentId=&quot;</span> + parentId +<br>                <span class="hljs-string">&quot;, orderNum=&quot;</span> + orderNum +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3、统一响应"><a href="#3、统一响应" class="headerlink" title="3、统一响应"></a>3、统一响应</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shu.mall.common;<br><br><span class="hljs-keyword">import</span> com.shu.mall.exception.LiveMallExceptionEnum;<br><br><span class="hljs-comment">//返回通用接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApiRestResponse</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-comment">//状态码</span><br>    <span class="hljs-keyword">private</span> Integer status;<br>    <span class="hljs-comment">//信息</span><br>    <span class="hljs-keyword">private</span> String msg;<br>    <span class="hljs-comment">//泛型，数据类型不固定，表示数据</span><br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> OK_CODE = <span class="hljs-number">10000</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String OK_MSG = <span class="hljs-string">&quot;SUCCESS&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getStatus</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> status;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStatus</span><span class="hljs-params">(Integer status)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.status = status;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMsg</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMsg</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getData</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setData</span><span class="hljs-params">(T data)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getOkCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> OK_CODE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getOkMsg</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> OK_MSG;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ApiRestResponse</span><span class="hljs-params">(Integer status, String msg, T data)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.status = status;<br>        <span class="hljs-keyword">this</span>.msg = msg;<br>        <span class="hljs-keyword">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ApiRestResponse</span><span class="hljs-params">(Integer status, String msg)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.status = status;<br>        <span class="hljs-keyword">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ApiRestResponse</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(OK_CODE,OK_MSG);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">ApiRestResponse&lt;T&gt; <span class="hljs-title">success</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiRestResponse&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">ApiRestResponse&lt;Object&gt; <span class="hljs-title">success</span><span class="hljs-params">(T result)</span></span>&#123;<br>        ApiRestResponse&lt;Object&gt; response = <span class="hljs-keyword">new</span> ApiRestResponse&lt;&gt;();<br>        response.setData(result);<br>        <span class="hljs-keyword">return</span> response;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">ApiRestResponse&lt;Object&gt; <span class="hljs-title">error</span><span class="hljs-params">(Integer code ,String msg)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiRestResponse&lt;&gt;(code,msg);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">ApiRestResponse&lt;Object&gt; <span class="hljs-title">error</span><span class="hljs-params">(LiveMallExceptionEnum ex)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiRestResponse&lt;&gt;(ex.getCode(),ex.getMsg());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="4、Redis缓存的使用"><a href="#4、Redis缓存的使用" class="headerlink" title="4、Redis缓存的使用"></a>4、Redis缓存的使用</h4><ul><li>首先，在pom.xml文件中添加依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>然后，在启动类中使用@EnableCaching注解启动缓存</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shu.mall;<br><br><span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cache.annotation.EnableCaching;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 严树成</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(basePackages = &quot;com.shu.mall.model.dao&quot;)</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-meta">@EnableCaching</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MallApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(MallApplication.class, args);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>然后，在application.properties中配置Redis的主机号和端口号（注意，记住端口号6379！）</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">spring.redis.host</span>=<span class="hljs-string">localhost</span><br><span class="hljs-meta">spring.redis.port</span>=<span class="hljs-string">6379</span><br></code></pre></td></tr></table></figure><ul><li>然后，配置CacheManager,设置缓存持续时间为30s</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shu.mall.config;<br><br><span class="hljs-keyword">import</span> org.springframework.cache.annotation.EnableCaching;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.cache.RedisCacheWriter;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class="hljs-keyword">import</span> java.time.Duration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableCaching</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CachingConfig</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RedisCacheManager <span class="hljs-title">redisCacheManager</span><span class="hljs-params">(RedisConnectionFactory connectionFactory)</span></span>&#123;<br>        RedisCacheWriter redisCacheWriter = RedisCacheWriter<br>                .lockingRedisCacheWriter(connectionFactory);<br>        RedisCacheConfiguration cacheConfiguration = RedisCacheConfiguration.defaultCacheConfig();<br>        cacheConfiguration = cacheConfiguration.entryTtl(Duration.ofSeconds(<span class="hljs-number">30</span>));<br><br>        RedisCacheManager redisCacheManager = <span class="hljs-keyword">new</span> RedisCacheManager(redisCacheWriter,<br>                cacheConfiguration);<br>        <span class="hljs-keyword">return</span> redisCacheManager;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>使用Redis，在service层的实现类中，在面向用户的<strong>商品列表</strong>查询的接口实现中添加**@Cacheable注解**</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Cacheable(value = &quot;listCategoryForCustomer&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;CategoryVo&gt; <span class="hljs-title">listCategoryForCustomer</span><span class="hljs-params">(Integer parentId)</span></span>&#123;<br>        ArrayList&lt;CategoryVo&gt; categoryVoList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        recursivelyFindCategories(categoryVoList,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> categoryVoList;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="5、SpringBoot整合MyBatis配置"><a href="#5、SpringBoot整合MyBatis配置" class="headerlink" title="5、SpringBoot整合MyBatis配置"></a>5、SpringBoot整合MyBatis配置</h4><ul><li>首先，pom.xml的依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>application.properties配置（<strong>数据库驱动、用户名和密码、url、端口号、mapper文件所在路径</strong>）</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">ysc223</span><br><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/imooc_mall?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=GMT</span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">8083</span><br><br><span class="hljs-meta">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:mappers/*.xml</span><br></code></pre></td></tr></table></figure><ul><li>mapper映射（dao层Mapper接口–&gt;Mapper.xml文件）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shu.mall.model.dao;<br><br><span class="hljs-keyword">import</span> com.shu.mall.model.pojo.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 严树成</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@describe</span> 用户接口。包含增删改查用户信息的抽象方法。</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@describe</span> 根据主键删除用户</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id ，Integer类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteByPrimaryKey</span><span class="hljs-params">(Integer id)</span></span>;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@describe</span> 插入用户</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> record ，User类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insert</span><span class="hljs-params">(User record)</span></span>;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@describe</span> 选择性的插入用户</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> record</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insertSelective</span><span class="hljs-params">(User record)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@describe</span> 根据主键查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 用户 User类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">User <span class="hljs-title">selectByPrimaryKey</span><span class="hljs-params">(Integer id)</span></span>;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@describe</span> 根据主键选择的更新</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> record</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateByPrimaryKeySelective</span><span class="hljs-params">(User record)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@describe</span> 通过主键更新</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> record</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateByPrimaryKey</span><span class="hljs-params">(User record)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">User <span class="hljs-title">selectByName</span><span class="hljs-params">(String userName)</span></span>;<br><br>    <span class="hljs-function">User <span class="hljs-title">selectLogin</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;userName&quot;)</span> String userName, <span class="hljs-meta">@Param(&quot;password&quot;)</span> String password)</span></span>;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.shu.mall.model.dao.UserMapper&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.shu.mall.model.pojo.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;personalized_signature&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;personalizedSignature&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;role&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;role&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;update_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;updateTime&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Base_Column_List&quot;</span>&gt;</span><br>    id, username, `password`, personalized_signature, `role`, create_time, update_time<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByPrimaryKey&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span><br>    select <br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;Base_Column_List&quot;</span> /&gt;</span><br>    from imooc_mall_user<br>    where id = #&#123;id,jdbcType=INTEGER&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteByPrimaryKey&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;</span><br>    delete from imooc_mall_user<br>    where id = #&#123;id,jdbcType=INTEGER&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.shu.mall.model.pojo.User&quot;</span>&gt;</span><br>    insert into imooc_mall_user (id, username, `password`, <br>      personalized_signature, `role`, create_time, <br>      update_time)<br>    values (#&#123;id,jdbcType=INTEGER&#125;, #&#123;username,jdbcType=VARCHAR&#125;, #&#123;password,jdbcType=VARCHAR&#125;, <br>      #&#123;personalizedSignature,jdbcType=VARCHAR&#125;, #&#123;role,jdbcType=INTEGER&#125;, #&#123;createTime,jdbcType=TIMESTAMP&#125;, <br>      #&#123;updateTime,jdbcType=TIMESTAMP&#125;)<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertSelective&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.shu.mall.model.pojo.User&quot;</span>&gt;</span><br>    insert into imooc_mall_user<br>    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;id != null&quot;</span>&gt;</span><br>        id,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;username != null&quot;</span>&gt;</span><br>        username,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;password != null&quot;</span>&gt;</span><br>        `password`,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;personalizedSignature != null&quot;</span>&gt;</span><br>        personalized_signature,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;role != null&quot;</span>&gt;</span><br>        `role`,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;createTime != null&quot;</span>&gt;</span><br>        create_time,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;updateTime != null&quot;</span>&gt;</span><br>        update_time,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;values (&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;id != null&quot;</span>&gt;</span><br>        #&#123;id,jdbcType=INTEGER&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;username != null&quot;</span>&gt;</span><br>        #&#123;username,jdbcType=VARCHAR&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;password != null&quot;</span>&gt;</span><br>        #&#123;password,jdbcType=VARCHAR&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;personalizedSignature != null&quot;</span>&gt;</span><br>        #&#123;personalizedSignature,jdbcType=VARCHAR&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;role != null&quot;</span>&gt;</span><br>        #&#123;role,jdbcType=INTEGER&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;createTime != null&quot;</span>&gt;</span><br>        #&#123;createTime,jdbcType=TIMESTAMP&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;updateTime != null&quot;</span>&gt;</span><br>        #&#123;updateTime,jdbcType=TIMESTAMP&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateByPrimaryKeySelective&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.shu.mall.model.pojo.User&quot;</span>&gt;</span><br>    update imooc_mall_user<br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;username != null&quot;</span>&gt;</span><br>        username = #&#123;username,jdbcType=VARCHAR&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;password != null&quot;</span>&gt;</span><br>        `password` = #&#123;password,jdbcType=VARCHAR&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;personalizedSignature != null&quot;</span>&gt;</span><br>        personalized_signature = #&#123;personalizedSignature,jdbcType=VARCHAR&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;role != null&quot;</span>&gt;</span><br>        `role` = #&#123;role,jdbcType=INTEGER&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;createTime != null&quot;</span>&gt;</span><br>        create_time = #&#123;createTime,jdbcType=TIMESTAMP&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;updateTime != null&quot;</span>&gt;</span><br>        update_time = #&#123;updateTime,jdbcType=TIMESTAMP&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    where id = #&#123;id,jdbcType=INTEGER&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateByPrimaryKey&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.shu.mall.model.pojo.User&quot;</span>&gt;</span><br>    update imooc_mall_user<br>    set username = #&#123;username,jdbcType=VARCHAR&#125;,<br>      `password` = #&#123;password,jdbcType=VARCHAR&#125;,<br>      personalized_signature = #&#123;personalizedSignature,jdbcType=VARCHAR&#125;,<br>      `role` = #&#123;role,jdbcType=INTEGER&#125;,<br>      create_time = #&#123;createTime,jdbcType=TIMESTAMP&#125;,<br>      update_time = #&#123;updateTime,jdbcType=TIMESTAMP&#125;<br>    where id = #&#123;id,jdbcType=INTEGER&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByName&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span><br>            select<br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;Base_Column_List&quot;</span>/&gt;</span><br>              from imooc_mall_user<br>              where username =#&#123;userName,jdbcType=VARCHAR&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectLogin&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span><br>    select<br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;Base_Column_List&quot;</span>/&gt;</span><br>    from imooc_mall_user<br>    where username =#&#123;userName,jdbcType=VARCHAR&#125;<br>    and password=#&#123;password&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="6、使用AOP统一处理Web请求日志（面向切面编程和日志-在项目中也属于过滤器的一部分）"><a href="#6、使用AOP统一处理Web请求日志（面向切面编程和日志-在项目中也属于过滤器的一部分）" class="headerlink" title="6、使用AOP统一处理Web请求日志（面向切面编程和日志,在项目中也属于过滤器的一部分）"></a>6、使用AOP统一处理Web请求日志（面向切面编程和日志,在项目中也属于过滤器的一部分）</h4><ul><li>首先，在pom.xml导入web模块</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>引入AOP依赖和log4j2日志依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>实现Web层面的日志切面</p><p>使用<code>@Aspect</code>注解将一个java类定义为切面类</p><p>使用<code>@Pointcut</code>定义一个切入点，可以是一个规则表达式，比如下例中某个package下的所有函数，也可以是一个注解等。</p><p>使用<code>@Before</code>在切入点开始处切入内容</p><p>使用<code>@After</code>在切入点结尾处切入内容</p><p>使用<code>@AfterReturning</code>在切入点return内容之后切入内容（可以用来对处理返回值做一些加工处理）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shu.mall.filter;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.AfterReturning;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Before;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebLogAspect</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Logger log = LoggerFactory.getLogger(WebLogAspect.class);<br><br>    <span class="hljs-meta">@Pointcut(&quot;execution(public * com.shu.mall.controller.*.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">webLog</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Before(&quot;webLog()&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doBefore</span><span class="hljs-params">(JoinPoint joinPoint)</span> </span>&#123;<br>        <span class="hljs-comment">//收到请求，记录请求记录</span><br>        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();<br>        HttpServletRequest request = attributes.getRequest();<br>        log.info(<span class="hljs-string">&quot;URL:&quot;</span> + request.getRequestURL().toString());<br>        log.info(<span class="hljs-string">&quot;HTTP_METHOD:&quot;</span> + request.getMethod());<br>        log.info(<span class="hljs-string">&quot;IP:&quot;</span> + request.getRemoteAddr());<br>        log.info(<span class="hljs-string">&quot;CLASS_METHOD:&quot;</span> + joinPoint.getSignature().getDeclaringTypeName() + <span class="hljs-string">&quot;.&quot;</span> + joinPoint.getSignature().getName());<br>        log.info(<span class="hljs-string">&quot;ARGS:&quot;</span> + Arrays.toString(joinPoint.getArgs()));<br>    &#125;<br><br>    <span class="hljs-meta">@AfterReturning(returning = &quot;res&quot;, pointcut = &quot;webLog()&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doAfterReturning</span><span class="hljs-params">(Object res)</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br>        <span class="hljs-comment">//处理完请求，返回内容</span><br>        log.info(<span class="hljs-string">&quot;RESPONSE:&quot;</span> + <span class="hljs-keyword">new</span> ObjectMapper().writeValueAsString(res));<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="7、用户控制器（Session、登录状态判断、权限管理、过滤器）"><a href="#7、用户控制器（Session、登录状态判断、权限管理、过滤器）" class="headerlink" title="7、用户控制器（Session、登录状态判断、权限管理、过滤器）"></a>7、用户控制器（Session、登录状态判断、权限管理、过滤器）</h4><ul><li>面向用户的如下，主要判断是否处于登录状态</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shu.mall.filter;<br><br><span class="hljs-keyword">import</span> com.shu.mall.common.Constant;<br><span class="hljs-keyword">import</span> com.shu.mall.model.pojo.User;<br><span class="hljs-keyword">import</span> com.shu.mall.service.UserService;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> javax.servlet.Filter;<br><span class="hljs-keyword">import</span> javax.servlet.FilterChain;<br><span class="hljs-keyword">import</span> javax.servlet.FilterConfig;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.ServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.ServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponseWrapper;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 描述：     用户过滤器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> User currentUser;<br><br>    <span class="hljs-meta">@Autowired</span><br>    UserService userService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse,</span></span><br><span class="hljs-function"><span class="hljs-params">            FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        HttpServletRequest request = (HttpServletRequest) servletRequest;<br>        HttpSession session = request.getSession();<br>        currentUser = (User) session.getAttribute(Constant.LIVE_MALL_USER);<br>        <span class="hljs-keyword">if</span> (currentUser == <span class="hljs-keyword">null</span>) &#123;<br>            PrintWriter out = <span class="hljs-keyword">new</span> HttpServletResponseWrapper(<br>                    (HttpServletResponse) servletResponse).getWriter();<br>            out.write(<span class="hljs-string">&quot;&#123;\n&quot;</span><br>                    + <span class="hljs-string">&quot;    \&quot;status\&quot;: 10007,\n&quot;</span><br>                    + <span class="hljs-string">&quot;    \&quot;msg\&quot;: \&quot;NEED_LOGIN\&quot;,\n&quot;</span><br>                    + <span class="hljs-string">&quot;    \&quot;data\&quot;: null\n&quot;</span><br>                    + <span class="hljs-string">&quot;&#125;&quot;</span>);<br>            out.flush();<br>            out.close();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        filterChain.doFilter(servletRequest, servletResponse);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li></li></ul><p>面向管理员的如下，主要判断是否处于登录状态以及是否是管理员权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shu.mall.filter;<br><br><span class="hljs-keyword">import</span> com.shu.mall.common.Constant;<br><span class="hljs-keyword">import</span> com.shu.mall.model.pojo.User;<br><span class="hljs-keyword">import</span> com.shu.mall.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponseWrapper;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-comment">//统一校验处理</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    UserService userService;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br><br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        HttpServletRequest request1 = (HttpServletRequest) request;<br>        HttpSession session = request1.getSession();<br>        User currentUser = (User) session.getAttribute(Constant.LIVE_MALL_USER);<br>        <span class="hljs-keyword">if</span> (currentUser == <span class="hljs-keyword">null</span>) &#123;<br>            PrintWriter out = <span class="hljs-keyword">new</span> HttpServletResponseWrapper((HttpServletResponse) response).getWriter();<br>            out.write(<span class="hljs-string">&quot;&#123;\n&quot;</span><br>                    + <span class="hljs-string">&quot;    \&quot;status\&quot;: 10007,\n&quot;</span><br>                    + <span class="hljs-string">&quot;    \&quot;msg\&quot;: \&quot;NEED_LOGIN\&quot;,\n&quot;</span><br>                    + <span class="hljs-string">&quot;    \&quot;data\&quot;: null\n&quot;</span><br>                    + <span class="hljs-string">&quot;&#125;&quot;</span>);<br>            out.flush();<br>            out.close();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//校验当前登录用户是否管理员</span><br>        <span class="hljs-keyword">if</span> (currentUser.getRole() == <span class="hljs-number">2</span>) &#123;<br>            chain.doFilter(request,response);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            PrintWriter out = <span class="hljs-keyword">new</span> HttpServletResponseWrapper((HttpServletResponse) response).getWriter();<br>            out.write(<span class="hljs-string">&quot;&#123;\n&quot;</span><br>                    + <span class="hljs-string">&quot;    \&quot;status\&quot;: 10009,\n&quot;</span><br>                    + <span class="hljs-string">&quot;    \&quot;msg\&quot;: \&quot;NEED_ADMIN\&quot;,\n&quot;</span><br>                    + <span class="hljs-string">&quot;    \&quot;data\&quot;: null\n&quot;</span><br>                    + <span class="hljs-string">&quot;&#125;&quot;</span>);<br>            out.flush();<br>            out.close();<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="8、PageInfo分页处理"><a href="#8、PageInfo分页处理" class="headerlink" title="8、PageInfo分页处理"></a>8、PageInfo分页处理</h4><ol><li>首先，导入pagehelper依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">2. 然后初始化分页参数、查询结果、对查询结果进行分页</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shu.mall.service.impl;<br><br><span class="hljs-keyword">import</span> com.github.pagehelper.PageHelper;<br><span class="hljs-keyword">import</span> com.github.pagehelper.PageInfo;<br><br> <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> PageInfo <span class="hljs-title">listforAdmin</span><span class="hljs-params">(Integer pageNum, Integer pageSize)</span></span>&#123;<br>        PageHelper.startPage(pageNum,pageSize);<br>        List&lt;Product&gt; products = productMapper.selectListForAdmin();<br>        PageInfo pageInfo = <span class="hljs-keyword">new</span> PageInfo(products);<br>        <span class="hljs-keyword">return</span> pageInfo;<br></code></pre></td></tr></table></figure><ol start="3"><li>面向用户的商品列表返回，涉及搜索处理、目录处理、排序处理。Query对象中默认设置pageNum=1，pageSize=10</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> PageInfo <span class="hljs-title">list</span><span class="hljs-params">(ProductListReq productListReq)</span> </span>&#123;<br>        <span class="hljs-comment">//构建Query对象</span><br>        ProductListQuery productListQuery = <span class="hljs-keyword">new</span> ProductListQuery();<br><br>        <span class="hljs-comment">//搜索处理</span><br>        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(productListReq.getKeyword())) &#123;<br>            String keyword = <span class="hljs-keyword">new</span> StringBuilder().append(<span class="hljs-string">&quot;%&quot;</span>).append(productListReq.getKeyword())<br>                    .append(<span class="hljs-string">&quot;%&quot;</span>).toString();<br>            productListQuery.setKeyword(keyword);<br>        &#125;<br><br>        <span class="hljs-comment">//目录处理：如果查某个目录下的商品，不仅是需要查出该目录下的，还要把所有子目录的所有商品都查出来，所以要拿到一个目录id的List</span><br>        <span class="hljs-keyword">if</span> (productListReq.getCategoryId() != <span class="hljs-keyword">null</span>) &#123;<br>            List&lt;CategoryVo&gt; categoryVoList = categoryService<br>                    .listCategoryForCustomer(productListReq.getCategoryId());<br>            ArrayList&lt;Integer&gt; categoryIds = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>            categoryIds.add(productListReq.getCategoryId());<br>            getCategoryIds(categoryVoList, categoryIds);<br>            productListQuery.setCategoryIds(categoryIds);<br>        &#125;<br><br>        <span class="hljs-comment">//排序处理</span><br>        String orderBy = productListReq.getOrderBy();<br>        <span class="hljs-keyword">if</span> (Constant.ProductListOrderBy.PRICE_ASC_DESC.contains(orderBy)) &#123;<br>            PageHelper.startPage(productListReq.getPageNum(), productListReq.getPageSize(), orderBy);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            PageHelper.startPage(productListReq.getPageNum(), productListReq.getPageSize());<br>        &#125;<br>        List&lt;Product&gt; productList = productMapper.selectList(productListQuery);<br>        PageInfo pageInfo = <span class="hljs-keyword">new</span> PageInfo(productList);<br>        <span class="hljs-keyword">return</span> pageInfo;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getCategoryIds</span><span class="hljs-params">(List&lt;CategoryVo&gt; categoryVoList, ArrayList&lt;Integer&gt; categoryIds)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; categoryVoList.size(); i++) &#123;<br>            CategoryVo categoryVo = categoryVoList.get(i);<br>            <span class="hljs-keyword">if</span> (categoryVo != <span class="hljs-keyword">null</span>) &#123;<br>                categoryIds.add(categoryVo.getId());<br>                getCategoryIds(categoryVo.getChildCategory(), categoryIds);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="9、事务管理订单模块"><a href="#9、事务管理订单模块" class="headerlink" title="9、事务管理订单模块"></a>9、事务管理订单模块</h4><ul><li>触发回滚的异常设置为Exception.class，MySQL的默认事务隔离级别是可重复读</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">create</span><span class="hljs-params">(CreateOrderReq createOrderReq)</span></span>&#123;<br>    <span class="hljs-comment">//拿到用户ID</span><br>    Integer userId = UserFilter.currentUser.getId();<br><br>    <span class="hljs-comment">//从购物车查找已经勾选的商品</span><br>    List&lt;CartVO&gt; cartVOList = cartService.list(userId);<br>    ArrayList&lt;CartVO&gt; cartVOTemp = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cartVOList.size(); i++) &#123;<br>        CartVO cartVO = cartVOList.get(i);<br>        <span class="hljs-keyword">if</span> (cartVO.getSelected().equals(Constant.Cart.CHECKED)) &#123;<br>            cartVOTemp.add(cartVO);<br>        &#125;<br>    &#125;<br>    cartVOList = cartVOTemp;<br>    <span class="hljs-comment">//如果购物车已勾选的为空，报错</span><br>    <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(cartVOList)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> LiveMallException(LiveMallExceptionEnum.CART_EMPTY);<br>    &#125;<br>    <span class="hljs-comment">//判断商品是否存在、上下架状态、库存</span><br>    validSaleStatusAndStock(cartVOList);<br>    <span class="hljs-comment">//把购物车对象转化成订单item对象</span><br>    List&lt;OrderItem&gt; orderItemList = cartVOListToOrderItemList(cartVOList);<br>    <span class="hljs-comment">//扣库存</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; orderItemList.size(); i++) &#123;<br>        Product product = productMapper.selectByPrimaryKey(orderItemList.get(i).getProductId());<br>        Integer stock = product.getStock();<br>        stock=stock-orderItemList.get(i).getQuantity();<br>        <span class="hljs-keyword">if</span> (stock&lt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> LiveMallException(LiveMallExceptionEnum.NOT_ENOUGH);<br>        &#125;<br>        product.setStock(stock);<br>        productMapper.updateByPrimaryKeySelective(product);<br><br>    &#125;<br>    <span class="hljs-comment">//把购物车中的已勾选商品删除</span><br>    cleanCart(cartVOList);<br>    <span class="hljs-comment">//生成订单</span><br>    Order order = <span class="hljs-keyword">new</span> Order();<br>    <span class="hljs-comment">//生成订单号，有独立的规则</span><br>    String orderNo = OrderCodeFactory.getOrderCode(Long.valueOf(userId));<br><br>    order.setOrderNo(orderNo);<br>    order.setUserId(userId);<br>    order.setTotalPrice(totalPrice(orderItemList));<br>    order.setReceiverName(createOrderReq.getReceiverName());<br>    order.setReceiverMobile(createOrderReq.getReceiverMobile());<br>    order.setReceiverAddress(createOrderReq.getReceiverAddress());<br>    order.setOrderStatus(Constant.OrderStatusEnum.NOT_PAID.getCode());<br>    order.setPostage(<span class="hljs-number">0</span>);<br>    order.setPaymentType(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">//插入到order表</span><br>    orderMapper.insertSelective(order);<br>    <span class="hljs-comment">//循环保存每个商品到order_item表</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; orderItemList.size(); i++) &#123;<br>        OrderItem orderItem = orderItemList.get(i);<br>        orderItem.setOrderNo(order.getOrderNo());<br>        orderItemMapper.insertSelective(orderItem);<br>    &#125;<br><br>    <span class="hljs-comment">//把结果返回</span><br>    <span class="hljs-keyword">return</span> orderNo;<br>&#125;<br></code></pre></td></tr></table></figure><p>[TOC]</p>]]></content>
    
    
    
    <tags>
      
      <tag>项目功能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>鼓楼|歌词</title>
    <link href="/2021/03/22/%E9%BC%93%E6%A5%BC-%E6%AD%8C%E8%AF%8D/"/>
    <url>/2021/03/22/%E9%BC%93%E6%A5%BC-%E6%AD%8C%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<p>我走在鼓楼下面</p><p>路在堵着</p><p>雨后的阳光散落</p><p>人们都出来了</p><p>执着的迷惘的</p><p>文艺青年很多</p><p>如果我无聊了就会来这里坐坐</p><p>我是个沉默不语的靠着墙壁晒太阳的过客</p><p>如果我有些倦意了</p><p>就让我在这里独自醒过</p><p>我站在鼓楼上面</p><p>一切繁华与我无关</p><p>这是个拥挤的地方</p><p>而我却很平凡</p><p>我走在鼓楼下面</p><p>淋湿的咖啡馆</p><p>睡不着的后海边</p><p>月亮还在抽着烟</p><p>喝醉的亲吻着</p><p>快活的人不眠</p><p>唯有我倚着围栏</p><p>对过往说晚安</p><p>晚安</p><p>我是个沉默不语的靠着车窗想念你的乘客</p><p>当一零七路再次经过</p><p>时间是带走青春的电车</p><p>我站在什刹海边</p><p>一切甜蜜与我无关</p><p>这是个拥挤的地方</p><p>而我却很孤单</p><p>我在鼓楼 我在鼓楼</p><p>我在鼓楼 我在鼓楼</p><p>我在鼓楼 我在鼓楼</p>]]></content>
    
    
    
    <tags>
      
      <tag>歌词</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM知识问答总结</title>
    <link href="/2021/03/21/JVM%E7%9F%A5%E8%AF%86%E9%97%AE%E7%AD%94%E6%80%BB%E7%BB%93/"/>
    <url>/2021/03/21/JVM%E7%9F%A5%E8%AF%86%E9%97%AE%E7%AD%94%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="1-JVM基础"><a href="#1-JVM基础" class="headerlink" title="1. JVM基础"></a>1. JVM基础</h2><h3 id="1-1-对JVM的认识和理解"><a href="#1-1-对JVM的认识和理解" class="headerlink" title="1.1 对JVM的认识和理解"></a>1.1 对JVM的认识和理解</h3><ul><li>功能：JVM的全称是Java虚拟机，用来运行字节码文件（.class）。</li><li>优点：它屏蔽了具体操作系统和平台的差异，使得同一字节码能在不同平台运行，且能得到相同的结果。</li></ul><h4 id="1-1-1-什么是字节码"><a href="#1-1-1-什么是字节码" class="headerlink" title="1.1.1 什么是字节码"></a>1.1.1 什么是字节码</h4><ul><li>定义：扩展名为 .class 的的文件叫做字节码，相比较于源码，它是程序的一种低级表示。</li><li>特性：不面向特定的处理器，只面向虚拟机JVM，经过虚拟机处理过后，程序可以在多平台上运行。</li></ul><h4 id="1-1-2-Java-程序从代码到运行的过程"><a href="#1-1-2-Java-程序从代码到运行的过程" class="headerlink" title="1.1.2 Java 程序从代码到运行的过程"></a>1.1.2 Java 程序从代码到运行的过程</h4><ul><li>过程：编写 -&gt; 编译 -&gt; 解释</li><li>⾸先通过IDE/编辑器编写源代码然后经过 JDK 中的编译器（javac）编译成 Java 字节码⽂件（.class⽂件），字节码通过虚拟机执⾏，虚拟机将每⼀条要执⾏的字节码送给解释器，解释器会将其翻译成特定机器上的机器码（及其可执⾏的⼆进制机器码）。</li></ul><h3 id="1-2-对类加载器的了解"><a href="#1-2-对类加载器的了解" class="headerlink" title="1.2 对类加载器的了解"></a>1.2 对类加载器的了解</h3><ul><li>功能：类加载器根据指定class文件的<strong>全限定名称</strong>（例如java.lang.Object，路径+文件的形式），将其<strong>加载到JVM内存，转化为Class对象</strong></li></ul><h4 id="1-2-1-类加载器的执行流程"><a href="#1-2-1-类加载器的执行流程" class="headerlink" title="1.2.1 类加载器的执行流程"></a>1.2.1 类加载器的执行流程</h4><p><img src="/2021/03/21/JVM%E7%9F%A5%E8%AF%86%E9%97%AE%E7%AD%94%E6%80%BB%E7%BB%93/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E6%B5%81%E7%A8%8B.png" alt="类加载器的执行流程"></p><h5 id="1-2-1-1-加载"><a href="#1-2-1-1-加载" class="headerlink" title="1.2.1.1 加载"></a>1.2.1.1 加载</h5><ol><li>通过类的全限定名来获取该类的二进制字节流</li><li>将二进制字节流所代表的<strong>静态存储结构</strong>导入为<strong>方法区</strong>的<strong>运行时数据结构</strong></li><li><strong>在堆中生成一个对象</strong>来代表这个类，<strong>作为方法区数据的入口</strong></li></ol><h5 id="1-2-1-2-链接"><a href="#1-2-1-2-链接" class="headerlink" title="1.2.1.2 链接"></a>1.2.1.2 链接</h5><ol><li><p><strong>验证</strong>：保证<strong>二进制字节流符合虚拟机的要求</strong>，且不会威胁到<strong>虚拟机的安全</strong>。</p></li><li><p><strong>准备</strong>：为static<strong>静态变量分配内存</strong>，并<strong>设置初始值</strong>。</p></li><li><p><strong>解析</strong>：虚拟机将常量池中的<strong>符号引用</strong>转化为<strong>直接引用</strong>。</p><p>例如 import xxx.xxx.xxx 属于<strong>符号引⽤</strong>，⽽通过指针或者对象地址引⽤就是<strong>直接引⽤</strong></p></li></ol><h5 id="1-2-1-3-初始化"><a href="#1-2-1-3-初始化" class="headerlink" title="1.2.1.3 初始化"></a>1.2.1.3 初始化</h5><p>​    初始化会对变量进⾏赋值，即对最初的零值，进⾏显式初始化</p><h5 id="1-2-1-4-卸载"><a href="#1-2-1-4-卸载" class="headerlink" title="1.2.1.4 卸载"></a>1.2.1.4 卸载</h5><p>​    GC 垃圾回收内存中的⽆⽤对象</p><h4 id="1-2-2-类加载器有哪几种，加载顺序是什么样的"><a href="#1-2-2-类加载器有哪几种，加载顺序是什么样的" class="headerlink" title="1.2.2 类加载器有哪几种，加载顺序是什么样的"></a>1.2.2 类加载器有哪几种，加载顺序是什么样的</h4><ol><li><p>启动类加载器：<strong>JDK</strong>目录/lib下的jar和类以及**-Xbootclasspath参数指定路径下**的所有类</p></li><li><p>扩展类加载器：<strong>JRE</strong>⽬录/lib 下⾯的 jar 和类以及<strong>java.ext.dirs 系统变量所指定的路径下</strong>的 jar 包</p></li><li><p>应用类加载器：当前应⽤下 <strong>classpath</strong> 下⾯的 jar 包和类</p><p>顺序：最<strong>底层向上</strong></p></li></ol><h4 id="1-2-3-双亲委派机制"><a href="#1-2-3-双亲委派机制" class="headerlink" title="1.2.3 双亲委派机制"></a>1.2.3 双亲委派机制</h4><ul><li><p>⼯作过程是：如果⼀个类加载器收到了<strong>类加载的请求</strong>，他⾸先<strong>不会⾃⼰去尝试加载这个类</strong>，⽽是把这个<strong>请求委派给⽗类加载器</strong>去完成，每⼀个层次的类加载都是如此，因此所有的加载请求都<strong>最终应该传送到最顶层的启动类加载器中</strong>，只有<strong>当⽗加载器反馈⾃⼰⽆法完成这个加载请求</strong>（<strong>也就是它的范围搜索中，也没有找到所需要的类</strong>），<strong>⼦加载器才会尝试⾃⼰去完成加载</strong>。</p></li><li><p>优点：</p><ol><li>加载位于rt.jar包中的类（例如 java.lang.Object）时不管是哪个加载器加载，最终都会<br>委托最顶端的启动类加载器 BootStrapClassLoader 进⾏加载，这样<strong>保证它在各个类加</strong><br><strong>载器环境下都是同⼀个结果。</strong></li><li><strong>避免了⾃定义代码影响 JDK 的代码</strong>，如果我们⾃⼰也创建了⼀个 java.lang.Object 然后<br>放在程序的 classpath 中，就会导致系统中出现不同的 Object 类，Java 类型体系中最基<br>础的⾏为也就⽆法保证。</li></ol></li><li><p>不想用双亲委派机制怎么没办</p><p><strong>自定义类加载器</strong>，然后<strong>重写loadClass()方法</strong></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL是如何实现事务隔离的</title>
    <link href="/2021/03/21/MySQL%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%9A%84/"/>
    <url>/2021/03/21/MySQL%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%9A%84/</url>
    
    <content type="html"><![CDATA[<ul><li>首先，读未提交和串行化都是比较极端的做法，读未提交压根<strong>不加锁</strong>，所以也没有什么隔离效果，可以理解为<strong>无隔离</strong>。</li><li>其次，串行化。读的时候加<strong>共享锁</strong>，大家一起读。但是写的时候加<strong>排它锁</strong>，其他事务<strong>既不能并发写，也不能并发读</strong>。</li><li>最后是<strong>读提交和可重复读</strong>。这两种隔离级别比较复杂，因为既要允许一定程度的并发，也要兼顾解决问题。</li></ul><h3 id="实现可重复读"><a href="#实现可重复读" class="headerlink" title="实现可重复读"></a>实现可重复读</h3><p>为了解决不可重复读，或者为了实现可重复读，MySQL 采⽤了 <strong>MVVC (多版本并发控制)</strong> 的⽅式。</p><p>！<a href="%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB.png">可重复读</a></p><p>我们在数据库表中看到的⼀⾏记录可能实际上有多个版本，每个版本的记录除了有数据本⾝外，还要有⼀个<strong>表示版本的字段</strong>，记为 <strong>row trx_id</strong>，⽽这个字段就是使其产⽣的事务的 id，事务 ID 记为 <strong>transaction id</strong>，它在事务开始的时候向事务系统申请，<strong>按时间先后顺序递增</strong>。</p><ul><li><strong>快照</strong>是可重复读和不可重复读的关键，<strong>可重复读</strong>是在事务开始的时候⽣成⼀个当前<strong>事务全局性的快照</strong>，⽽<strong>读提交</strong>则是<strong>每次执⾏语句</strong>的时候都重新⽣成⼀次快照。</li></ul><h3 id="解决并发写问题"><a href="#解决并发写问题" class="headerlink" title="解决并发写问题"></a>解决并发写问题</h3><ul><li>假设事务A执⾏ update 操作， <strong>update 的时候要对所修改的行加行锁</strong>，<strong>这个⾏锁会在提交之后才释放。</strong>⽽在事务A提交之前，<strong>事务B也想 update 这⾏数据，于是申请⾏锁</strong>，但是由于已经被事务A占有，<strong>事务B是申请不到的</strong>，此时，<strong>事务B就会⼀直处于等待状态，直到事务A提交</strong>，事务B才能继续执⾏，如果事务A的时间太长，那么事务B很有可能出现超时异常。</li><li>加锁的过程要分<strong>有索引</strong>和<strong>⽆索引</strong>两种情况，⽐如下⾯这条语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">update <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> age<span class="hljs-operator">=</span><span class="hljs-number">11</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li><strong>id 是这张表的主键，是有索引的情况</strong>，那么 MySQL 直接就在索引数中找到了这⾏数据，然后⼲净利落的<strong>直接加上⾏锁</strong>就可以了。</li></ul><p>⽽下⾯这条语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">update <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> age<span class="hljs-operator">=</span><span class="hljs-number">11</span> <span class="hljs-keyword">where</span> age<span class="hljs-operator">=</span><span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><ul><li>表中并<strong>没有为 age 字段设置索引</strong>，所以， <strong>MySQL ⽆法直接定位到这⾏数据</strong>。那怎么办呢，当然也不是加表锁了。<strong>MySQL 会为这张表中所有⾏加⾏锁</strong>，没错，是所有⾏。但是呢，在加上⾏锁后，<strong>MySQL 会进⾏⼀遍过滤</strong>，发现<strong>不满⾜的⾏就释放锁</strong>，最终只留下符合条件的⾏。虽然最终只为符合条件的⾏加了锁，但是这⼀锁⼀释放的过程对<strong>性能也是影响极⼤的</strong>。所以，如果是⼤表的话，建议合理设计索引，如果真的出现这种情况，那很难保证并发度。</li></ul><h3 id="解决幻读问题"><a href="#解决幻读问题" class="headerlink" title="解决幻读问题"></a>解决幻读问题</h3><ul><li><p>MySQL 已经在可重复读隔离级别下解决了幻读的问题。</p></li><li><p>前⾯刚说了并发写问题的解决⽅式就是⾏锁，⽽解决幻读⽤的也是锁，叫做<strong>间隙锁</strong>，MySQL把⾏锁和间隙锁合并在⼀起，解决了并发写和幻读的问题，这个锁叫做 Next-Key锁。</p></li><li><p>在行记录上加行锁，在行记录两边的区间加上间隙锁。</p><p>！<a href="%E9%97%B4%E9%9A%99%E9%94%81.png">解决幻读问题的间隙锁</a></p></li></ul><p>在事务A提交之前，事务B的插⼊操作只能等待，这就是间隙锁起得作⽤。当事务A执⾏</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">update <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;风筝2号’ where age = 10;</span><br></code></pre></td></tr></table></figure><p> 的时候，由于条件 here age = 10，数据库不仅在 age =10 的⾏上添加了⾏锁，⽽且在这条记录的两边，也就是(负⽆穷,10]、(10,30]这两个区间加了间隙锁，从⽽导致事务B插⼊操作⽆法完成，只能等待事务A提交。不仅插⼊ age = 10 的记录需要等待事务A提交，age&lt;10、10&lt;age&lt;30 的记录页⽆法完成，⽽⼤于等于30的记录则不受影响，这⾜以解决幻读问题了。<br>这是有索引的情况，如果 age 不是索引列，那么数据库会为整个表加上间隙锁。所以，如果是没有索引的话，不管 age 是否⼤于等于30，都要等待事务A提交才可以成功插⼊。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>MySQL 的 <strong>InnoDB 引擎才⽀持事务</strong>，其中<strong>可重复读是默认的隔离级别</strong>。</li><li><strong>读未提交和串⾏化基本上是不需要考虑的隔离级别，前者不加锁限制，后者相当于单线程执⾏，效率太差。</strong></li><li><strong>读提交解决了脏读问题</strong>，<strong>⾏锁解决了并发更新的问题</strong>。并且 MySQL 在<strong>可重复读级别解决了幻读问题</strong>，是通过<strong>⾏锁和间隙锁的组合</strong> Next-Key 锁实现的。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL事务隔离级别原理</title>
    <link href="/2021/03/20/MySQL%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E5%92%8C%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <url>/2021/03/20/MySQL%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E5%92%8C%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><h2 id="MySQL事务"><a href="#MySQL事务" class="headerlink" title="MySQL事务"></a>MySQL事务</h2><ul><li>MySQL 事务都是指在 <strong>InnoDB 引擎</strong>下，因为MyISAM引擎是不支持事务的。</li><li>数据库是指：一组数据操作，事务内的操作要么全部成功，要么全部失败。只要有一步失败，就要回滚所有操作。</li><li>事务具有四个特性：ACID——原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）</li></ul><h2 id="四大问题：什么是脏读、可重复读、不可重复读、幻读？"><a href="#四大问题：什么是脏读、可重复读、不可重复读、幻读？" class="headerlink" title="四大问题：什么是脏读、可重复读、不可重复读、幻读？"></a>四大问题：什么是脏读、可重复读、不可重复读、幻读？</h2><ul><li><strong>脏读</strong>：<strong>读</strong>到了<strong>其他事务修改了但尚未提交</strong>的数据。这个事务的操作有可能发生回滚，那么就可能发生错误。</li><li><strong>可重复读：</strong>在一个事务内，从事务开始到事务结束，期间读到的同一批数据，始终是一致的。通常，针对数据更新（<strong>UPDATE</strong>）操作。</li><li><strong>不可重复读：</strong>在一个事务内，不同时刻读到的数据可能是不一致的。通常，针对数据更新（<strong>UPDATE</strong>）操作。</li><li><strong>幻读：</strong>幻读是针对<strong>插入（INSERT）</strong>操作来说的。假设事务A对某些⾏的内容作了更改，但是还未提交，此时<strong>事务B插⼊了与事务A更改前的记录相同的记录⾏</strong>，并且在事务A提交之前先提交了，⽽这时，在事务A中查询，会发现好像刚刚的更改对于某些数据未起作⽤，但其实是事务B刚插⼊进来的，让⽤户感觉很魔幻，感觉出现了幻觉，这就叫幻读。</li></ul><h2 id="四大隔离级别：读未提交、读提交、可重复读、串行化"><a href="#四大隔离级别：读未提交、读提交、可重复读、串行化" class="headerlink" title="四大隔离级别：读未提交、读提交、可重复读、串行化"></a>四大隔离级别：读未提交、读提交、可重复读、串行化</h2><ul><li><p>MySQL的<strong>默认隔离级别</strong>是<strong>可重复读</strong>。</p></li><li><p>MySQL 中执⾏事务：事务的执⾏过程如下，以 begin 或者 start transaction 开始，然后执⾏⼀系列操作，最后要执⾏ commit 操作，事务才算结束。当然，如果进⾏回滚操作(rollback)，事务也会结束。</p><p>需要注意的是，begin 命令并不代表事务的开始，事务开始于 begin 命令之后的第⼀条语句执⾏的时候。例如下⾯⽰例中，</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> xxx <br></code></pre></td></tr></table></figure><p>才是事务的开始。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">begin</span>; <br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> xxx;  <br><span class="hljs-keyword">commit</span>; <span class="hljs-comment">-- 或者 rollback;</span><br></code></pre></td></tr></table></figure><h3 id="1、读未提交"><a href="#1、读未提交" class="headerlink" title="1、读未提交"></a>1、读未提交</h3><p><strong>MySQL 事务隔离其实是依靠锁来实现的，加锁自然会带来性能的损失。⽽读未提交隔离级别是不加锁的，所以它的性能是最好的，没有加锁、解锁带来的性能开销。</strong>但有利就有弊，这基本上就相当于<strong>裸奔</strong>啊，所以它连脏读的问题都没办法解决。</p><p><strong>读未提交，其实就是可以读到其他事务未提交的数据</strong>，但没有办法保证你读到的数据最终⼀定是提交后的数据，如果中间发⽣回滚，那就<strong>会出现脏数据问题</strong>，读未提交没办法解决脏数据问题。更别提可重复读和幻读了。</p><h3 id="2、读提交"><a href="#2、读提交" class="headerlink" title="2、读提交"></a>2、读提交</h3><p>为了<strong>解决脏数据问题</strong>，就有了读提交隔离级别。读提交就是⼀个事务<strong>只能读到其他事务已经提交过的数据</strong>，也就是其他事务调⽤ commit 命令之后的数据。那脏数据问题迎刃而解了。</p><p>但这也导致了⼀个问题，在同⼀事务中（事务B），事务的不同时刻，同样的查询条件，查询出来的记录内容是不⼀样的。事务A的提交影响了事务B的查询结果（事务A提交前数值为1，提交后数值为10），这就是不可重复读问题，也就是读提交隔离级别。</p><h3 id="3、可重复读"><a href="#3、可重复读" class="headerlink" title="3、可重复读"></a>3、可重复读</h3><p>为了解决不可重复读问题，就有了<strong>可重复读</strong>隔离级别。同时启动两个事务A、B，事务A修改某数据并提交，但是事务B并不受修改的影响，读取的仍然是事务A修改前的值。</p><p>但这仍然存在一个问题，对于<strong>新插⼊的⾏记录</strong>，就没这么幸运了，幻读就这么产⽣了。</p><p><strong>其实，MySQL 的可重复读隔离级别其实解决了幻读问题</strong></p><h3 id="4、串行化"><a href="#4、串行化" class="headerlink" title="4、串行化"></a>4、串行化</h3><p>为了解决幻读问题，就有了串行化的隔离级别。串⾏化是4种事务隔离级别中隔离效果最好的，解决了脏读、可重复读、幻读的问题，但是效果最差，它将事务的执⾏变为顺序执⾏，与其他三个隔离级别相⽐，它就相当于单线程，后⼀个事务的执⾏必须等待前⼀个事务结束。</p><h1 id="-1"><a href="#-1" class="headerlink" title></a></h1></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>流水的学生，铁打的修路</title>
    <link href="/2021/03/20/%E6%B5%81%E6%B0%B4%E7%9A%84%E5%AD%A6%E7%94%9F%EF%BC%8C%E9%93%81%E6%89%93%E7%9A%84%E4%BF%AE%E8%B7%AF/"/>
    <url>/2021/03/20/%E6%B5%81%E6%B0%B4%E7%9A%84%E5%AD%A6%E7%94%9F%EF%BC%8C%E9%93%81%E6%89%93%E7%9A%84%E4%BF%AE%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<p>​    坊间传闻着一句话——“半年修一次，一次修半年”，说的就是学校永不停歇的修路工程。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/03/18/hello-world/"/>
    <url>/2021/03/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
